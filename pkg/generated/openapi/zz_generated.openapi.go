// +build !ignore_autogenerated

/*
Copyright 2020 The Jenkins X Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AutoUpdateConfig":         schema_pkg_apis_core_v4beta1_AutoUpdateConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureConfig":              schema_pkg_apis_core_v4beta1_AzureConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureDNSConfig":           schema_pkg_apis_core_v4beta1_AzureDNSConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureSecretConfig":        schema_pkg_apis_core_v4beta1_AzureSecretConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.ClusterConfig":            schema_pkg_apis_core_v4beta1_ClusterConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.EnvironmentConfig":        schema_pkg_apis_core_v4beta1_EnvironmentConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.GKEConfig":                schema_pkg_apis_core_v4beta1_GKEConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.IngressConfig":            schema_pkg_apis_core_v4beta1_IngressConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageConfig":      schema_pkg_apis_core_v4beta1_LegacyStorageConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageEntryConfig": schema_pkg_apis_core_v4beta1_LegacyStorageEntryConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.Requirements":             schema_pkg_apis_core_v4beta1_Requirements(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.RequirementsConfig":       schema_pkg_apis_core_v4beta1_RequirementsConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.RequirementsValues":       schema_pkg_apis_core_v4beta1_RequirementsValues(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.ResourceReference":        schema_pkg_apis_core_v4beta1_ResourceReference(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.StorageConfig":            schema_pkg_apis_core_v4beta1_StorageConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.TLSConfig":                schema_pkg_apis_core_v4beta1_TLSConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.UserNameEmailConfig":      schema_pkg_apis_core_v4beta1_UserNameEmailConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAWSConfig":           schema_pkg_apis_core_v4beta1_VaultAWSConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAWSUnsealConfig":     schema_pkg_apis_core_v4beta1_VaultAWSUnsealConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAzureConfig":         schema_pkg_apis_core_v4beta1_VaultAzureConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultConfig":              schema_pkg_apis_core_v4beta1_VaultConfig(ref),
		"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.sliceTransformer":         schema_pkg_apis_core_v4beta1_sliceTransformer(ref),
	}
}

func schema_pkg_apis_core_v4beta1_AutoUpdateConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AutoUpdateConfig contains auto update config",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled autoupdate",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule cron of auto updates",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled", "schedule"},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_AzureConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureConfig contains Azure specific requirements",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"registrySubscription": {
						SchemaProps: spec.SchemaProps{
							Description: "RegistrySubscription the registry subscription for defaulting the container registry. Not used if you specify a Registry explicitly",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dns": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureDNSConfig"),
						},
					},
					"secretStorage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureSecretConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureDNSConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureSecretConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_AzureDNSConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"subscriptionId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resourceGroup": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_AzureSecretConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"keyVaultName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_ClusterConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterConfig contains cluster specific requirements",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"azure": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureConfig the azure specific configuration",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureConfig"),
						},
					},
					"chartRepository": {
						SchemaProps: spec.SchemaProps{
							Description: "ChartRepository the repository URL to deploy charts to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gke": {
						SchemaProps: spec.SchemaProps{
							Description: "GKEConfig the gke specific configuration",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.GKEConfig"),
						},
					},
					"environmentGitOwner": {
						SchemaProps: spec.SchemaProps{
							Description: "EnvironmentGitOwner the default git owner for environment repositories if none is specified explicitly",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"environmentGitPublic": {
						SchemaProps: spec.SchemaProps{
							Description: "EnvironmentGitPublic determines whether jx boot create public or private git repos for the environments",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"gitPublic": {
						SchemaProps: spec.SchemaProps{
							Description: "GitPublic determines whether jx boot create public or private git repos for the applications",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider the kubernetes provider (e.g. gke)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectID the cloud project ID e.g. on GCP",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterName the logical name of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region the cloud region being used",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Description: "Zone the cloud zone being used",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gitName": {
						SchemaProps: spec.SchemaProps{
							Description: "GitName is the name of the default git service",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gitKind": {
						SchemaProps: spec.SchemaProps{
							Description: "GitKind is the kind of git server (github, bitbucketserver etc)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gitServer": {
						SchemaProps: spec.SchemaProps{
							Description: "GitServer is the URL of the git server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalDNSSAName": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalDNSSAName the service account name for external dns",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry the host name of the container registry",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kanikoSAName": {
						SchemaProps: spec.SchemaProps{
							Description: "VaultSAName the service account name for vault KanikoSAName the service account name for kaniko",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"devEnvApprovers": {
						SchemaProps: spec.SchemaProps{
							Description: "DevEnvApprovers contains an optional list of approvers to populate the initial OWNERS file in the dev env repo",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"dockerRegistryOrg": {
						SchemaProps: spec.SchemaProps{
							Description: "DockerRegistryOrg the default organisation used for container images",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AzureConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.GKEConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_EnvironmentConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentConfig configures the organisation and repository name of the git repositories for environments",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "Key is the key of the environment configuration",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "Owner is the git user or organisation for the repository",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository is the name of the repository within the owner",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gitServer": {
						SchemaProps: spec.SchemaProps{
							Description: "GitServer is the URL of the git server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gitKind": {
						SchemaProps: spec.SchemaProps{
							Description: "GitKind is the kind of git server (github, bitbucketserver etc)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress contains ingress specific requirements",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.IngressConfig"),
						},
					},
					"remoteCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "RemoteCluster specifies this environment runs on a remote cluster to the development cluster",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"promotionStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "PromotionStrategy what kind of promotion strategy to use",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.IngressConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_GKEConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKEConfig contains GKE specific requirements",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"projectNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "ProjectNumber the unique project number GKE assigns to a project (required for workload identity).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_IngressConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IngressConfig contains dns specific requirements",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"externalDNS": {
						SchemaProps: spec.SchemaProps{
							Description: "DNS is enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cloud_dns_secret_name": {
						SchemaProps: spec.SchemaProps{
							Description: "CloudDNSSecretName secret name which contains the service account for external-dns and cert-manager issuer to access the Cloud DNS service to resolve a DNS challenge",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"domain": {
						SchemaProps: spec.SchemaProps{
							Description: "Domain to expose ingress endpoints",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ignoreLoadBalancer": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreLoadBalancer if the nginx-controller LoadBalancer service should not be used to detect and update the domain if you are using a dynamic domain resolver like `.nip.io` rather than a real DNS configuration. With this flag enabled the `Domain` value will be used and never re-created based on the current LoadBalancer IP address.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"namespaceSubDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "NamespaceSubDomain the sub domain expression to expose ingress. Defaults to \".jx.\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Description: "TLS enable automated TLS using certmanager",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.TLSConfig"),
						},
					},
				},
				Required: []string{"externalDNS", "domain", "namespaceSubDomain"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.TLSConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_LegacyStorageConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Deprecated: migrate to top level Requirements object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"logs": {
						SchemaProps: spec.SchemaProps{
							Description: "Logs for storing build logs",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageEntryConfig"),
						},
					},
					"reports": {
						SchemaProps: spec.SchemaProps{
							Description: "Tests for storing test results, coverage + code quality reports",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageEntryConfig"),
						},
					},
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository for storing repository artifacts",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageEntryConfig"),
						},
					},
					"backup": {
						SchemaProps: spec.SchemaProps{
							Description: "Backup for backing up kubernetes resource",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageEntryConfig"),
						},
					},
				},
				Required: []string{"logs", "reports", "repository", "backup"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.LegacyStorageEntryConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_LegacyStorageEntryConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Deprecated: migrate to top level Requirements object",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled if the storage is enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL the cloud storage bucket URL such as 'gs://mybucket' or 's3://foo' or `azblob://thingy' see https://jenkins-x.io/architecture/storage/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled", "url"},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_Requirements(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Requirements represents a collection installation requirements for Jenkins X",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec the definition of the secret mappings",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.RequirementsConfig"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.RequirementsConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_RequirementsConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RequirementsConfig contains the logical installation requirements in the `jx-requirements.yml` file when installing, configuring or upgrading Jenkins X via `jx boot`",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"autoUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoUpdate contains auto update config",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AutoUpdateConfig"),
						},
					},
					"cluster": {
						SchemaProps: spec.SchemaProps{
							Description: "Cluster contains cluster specific requirements",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.ClusterConfig"),
						},
					},
					"environments": {
						SchemaProps: spec.SchemaProps{
							Description: "Environments the requirements for the environments",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.EnvironmentConfig"),
									},
								},
							},
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress contains ingress specific requirements",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.IngressConfig"),
						},
					},
					"pipelineUser": {
						SchemaProps: spec.SchemaProps{
							Description: "PipelineUser the user name and email used for running pipelines",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.UserNameEmailConfig"),
						},
					},
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "Repository specifies what kind of artifact repository you wish to use for storing artifacts (jars, tarballs, npm modules etc)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretStorage": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretStorage how should we store secrets for the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage contains storage requirements",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.StorageConfig"),
									},
								},
							},
						},
					},
					"terraform": {
						SchemaProps: spec.SchemaProps{
							Description: "Terraform specifies if  we are managing the kubernetes cluster and cloud resources with Terraform",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"vault": {
						SchemaProps: spec.SchemaProps{
							Description: "Vault the configuration for vault",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultConfig"),
						},
					},
					"webhook": {
						SchemaProps: spec.SchemaProps{
							Description: "Webhook specifies what engine we should use for webhooks",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"cluster", "ingress"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.AutoUpdateConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.ClusterConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.EnvironmentConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.IngressConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.StorageConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.UserNameEmailConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_RequirementsValues(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RequirementsValues contains the logical installation requirements in the `jx-requirements.yml` file as helm values",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"jxRequirements": {
						SchemaProps: spec.SchemaProps{
							Description: "RequirementsConfig contains the logical installation requirements",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.RequirementsConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.RequirementsConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_ResourceReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"kind", "name"},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_StorageConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageConfig contains dns specific requirements",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the bucket",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL the cloud storage bucket URL such as 'gs://mybucket' or 's3://foo' or `azblob://thingy' see https://jenkins-x.io/architecture/storage/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "url"},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_TLSConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TLSConfig contains TLS specific requirements",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "TLS enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "Email address to register with services like LetsEncrypt",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"production": {
						SchemaProps: spec.SchemaProps{
							Description: "Production false uses self-signed certificates from the LetsEncrypt staging server, true enables the production server which incurs higher rate limiting https://letsencrypt.org/docs/rate-limits/",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretName the name of the secret which contains the TLS certificate",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled", "email", "production"},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_UserNameEmailConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserNameEmailConfig contains the user name and email of a user (e.g. pipeline user)",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Description: "Username the username of the user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "Email the email address of the user",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_VaultAWSConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultAWSConfig contains all the Vault configuration needed by Vault to be deployed in AWS",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"VaultAWSUnsealConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAWSUnsealConfig"),
						},
					},
					"autoCreate": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"dynamoDBTable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dynamoDBRegion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"iamUserName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"VaultAWSUnsealConfig"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAWSUnsealConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_VaultAWSUnsealConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultAWSUnsealConfig contains references to existing AWS resources that can be used to install Vault",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kmsKeyId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kmsRegion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"s3Bucket": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"s3Prefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"s3Region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_VaultAzureConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultAzureConfig contains all the Vault configuration needed by Vault to be deployed in Azure",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tenantId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vaultName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"keyName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"storageAccountName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"containerName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_core_v4beta1_VaultConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultConfig contains Vault configuration for Boot",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name the name of the Vault if using Jenkins X managed Vault instance. Cannot be used in conjunction with the URL attribute",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bucket": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"recreateBucket": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"keyring": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"disableURLDiscovery": {
						SchemaProps: spec.SchemaProps{
							Description: "DisableURLDiscovery allows us to optionally override the default lookup of the Vault URL, could be incluster service or external ingress",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"aws": {
						SchemaProps: spec.SchemaProps{
							Description: "AWSConfig describes the AWS specific configuration needed for the Vault Operator.",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAWSConfig"),
						},
					},
					"azure": {
						SchemaProps: spec.SchemaProps{
							Description: "AzureConfig describes the Azure specific configuration needed for the Vault Operator.",
							Ref:         ref("github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAzureConfig"),
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL specifies the URL of an Vault instance to use for secret storage. Needs to be specified together with the Service Account and namespace to use for connecting to Vault. This cannot be used in conjunction with the Name attribute.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccount is the name of the Kubernetes service account allowed to authenticate against Vault.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the Kubernetes service account allowed to authenticate against Vault.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretEngineMountPoint": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretEngineMountPoint is the secret engine mount point to be used for writing data into the KV engine of Vault. If not specified the 'secret' is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubernetesAuthPath": {
						SchemaProps: spec.SchemaProps{
							Description: "KubernetesAuthPath is the auth path of used for this cluster If not specified the 'kubernetes' is used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAWSConfig", "github.com/jenkins-x/jx-api/v4/pkg/apis/core/v4beta1.VaultAzureConfig"},
	}
}

func schema_pkg_apis_core_v4beta1_sliceTransformer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
			},
		},
	}
}
