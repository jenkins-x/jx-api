// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package core

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AccountReference":                    schema_pkg_apis_jenkinsio_v1_AccountReference(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.App":                                 schema_pkg_apis_jenkinsio_v1_App(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AppList":                             schema_pkg_apis_jenkinsio_v1_AppList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AppSpec":                             schema_pkg_apis_jenkinsio_v1_AppSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Approve":                             schema_pkg_apis_jenkinsio_v1_Approve(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment":                          schema_pkg_apis_jenkinsio_v1_Attachment(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BatchPipelineActivity":               schema_pkg_apis_jenkinsio_v1_BatchPipelineActivity(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Binary":                              schema_pkg_apis_jenkinsio_v1_Binary(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BranchProtectionContextPolicy":       schema_pkg_apis_jenkinsio_v1_BranchProtectionContextPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Brancher":                            schema_pkg_apis_jenkinsio_v1_Brancher(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPack":                           schema_pkg_apis_jenkinsio_v1_BuildPack(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPackList":                       schema_pkg_apis_jenkinsio_v1_BuildPackList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPackSpec":                       schema_pkg_apis_jenkinsio_v1_BuildPackSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ChartRef":                            schema_pkg_apis_jenkinsio_v1_ChartRef(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatus":                        schema_pkg_apis_jenkinsio_v1_CommitStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusCommitReference":         schema_pkg_apis_jenkinsio_v1_CommitStatusCommitReference(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusDetails":                 schema_pkg_apis_jenkinsio_v1_CommitStatusDetails(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusItem":                    schema_pkg_apis_jenkinsio_v1_CommitStatusItem(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusList":                    schema_pkg_apis_jenkinsio_v1_CommitStatusList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusSpec":                    schema_pkg_apis_jenkinsio_v1_CommitStatusSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitSummary":                       schema_pkg_apis_jenkinsio_v1_CommitSummary(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigMapSpec":                       schema_pkg_apis_jenkinsio_v1_ConfigMapSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigUpdater":                       schema_pkg_apis_jenkinsio_v1_ConfigUpdater(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy":                       schema_pkg_apis_jenkinsio_v1_ContextPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CoreActivityStep":                    schema_pkg_apis_jenkinsio_v1_CoreActivityStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdate":                    schema_pkg_apis_jenkinsio_v1_DependencyUpdate(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdateDetails":             schema_pkg_apis_jenkinsio_v1_DependencyUpdateDetails(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DeployOptions":                       schema_pkg_apis_jenkinsio_v1_DeployOptions(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Environment":                         schema_pkg_apis_jenkinsio_v1_Environment(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentFilter":                   schema_pkg_apis_jenkinsio_v1_EnvironmentFilter(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentList":                     schema_pkg_apis_jenkinsio_v1_EnvironmentList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRepository":               schema_pkg_apis_jenkinsio_v1_EnvironmentRepository(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBinding":              schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBinding(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingList":          schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBindingList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingSpec":          schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBindingSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingStatus":        schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBindingStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentSpec":                     schema_pkg_apis_jenkinsio_v1_EnvironmentSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentStatus":                   schema_pkg_apis_jenkinsio_v1_EnvironmentStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentVariable":                 schema_pkg_apis_jenkinsio_v1_EnvironmentVariable(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Extension":                           schema_pkg_apis_jenkinsio_v1_Extension(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionConfig":                     schema_pkg_apis_jenkinsio_v1_ExtensionConfig(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionConfigList":                 schema_pkg_apis_jenkinsio_v1_ExtensionConfigList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinition":                 schema_pkg_apis_jenkinsio_v1_ExtensionDefinition(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionChildReference":   schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionChildReference(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionList":             schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionReference":        schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionReference(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionReferenceList":    schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionReferenceList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionExecution":                  schema_pkg_apis_jenkinsio_v1_ExtensionExecution(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionList":                       schema_pkg_apis_jenkinsio_v1_ExtensionList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameter":                  schema_pkg_apis_jenkinsio_v1_ExtensionParameter(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameterValue":             schema_pkg_apis_jenkinsio_v1_ExtensionParameterValue(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionRepositoryReference":        schema_pkg_apis_jenkinsio_v1_ExtensionRepositoryReference(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionRepositoryReferenceList":    schema_pkg_apis_jenkinsio_v1_ExtensionRepositoryReferenceList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionSpec":                       schema_pkg_apis_jenkinsio_v1_ExtensionSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExternalPlugin":                      schema_pkg_apis_jenkinsio_v1_ExternalPlugin(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Fact":                                schema_pkg_apis_jenkinsio_v1_Fact(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactList":                            schema_pkg_apis_jenkinsio_v1_FactList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactSpec":                            schema_pkg_apis_jenkinsio_v1_FactSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactStatus":                          schema_pkg_apis_jenkinsio_v1_FactStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitService":                          schema_pkg_apis_jenkinsio_v1_GitService(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitServiceList":                      schema_pkg_apis_jenkinsio_v1_GitServiceList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitServiceSpec":                      schema_pkg_apis_jenkinsio_v1_GitServiceSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitStatus":                           schema_pkg_apis_jenkinsio_v1_GitStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GlobalProtectionPolicy":              schema_pkg_apis_jenkinsio_v1_GlobalProtectionPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueLabel":                          schema_pkg_apis_jenkinsio_v1_IssueLabel(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueSummary":                        schema_pkg_apis_jenkinsio_v1_IssueSummary(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase":                             schema_pkg_apis_jenkinsio_v1_JobBase(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Lgtm":                                schema_pkg_apis_jenkinsio_v1_Lgtm(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Measurement":                         schema_pkg_apis_jenkinsio_v1_Measurement(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Merger":                              schema_pkg_apis_jenkinsio_v1_Merger(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Original":                            schema_pkg_apis_jenkinsio_v1_Original(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodic":                            schema_pkg_apis_jenkinsio_v1_Periodic(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodics":                           schema_pkg_apis_jenkinsio_v1_Periodics(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivity":                    schema_pkg_apis_jenkinsio_v1_PipelineActivity(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityList":                schema_pkg_apis_jenkinsio_v1_PipelineActivityList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivitySpec":                schema_pkg_apis_jenkinsio_v1_PipelineActivitySpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityStatus":              schema_pkg_apis_jenkinsio_v1_PipelineActivityStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityStep":                schema_pkg_apis_jenkinsio_v1_PipelineActivityStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineExtension":                   schema_pkg_apis_jenkinsio_v1_PipelineExtension(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructure":                   schema_pkg_apis_jenkinsio_v1_PipelineStructure(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructureList":               schema_pkg_apis_jenkinsio_v1_PipelineStructureList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructureStage":              schema_pkg_apis_jenkinsio_v1_PipelineStructureStage(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Plugin":                              schema_pkg_apis_jenkinsio_v1_Plugin(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PluginList":                          schema_pkg_apis_jenkinsio_v1_PluginList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PluginSpec":                          schema_pkg_apis_jenkinsio_v1_PluginSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmit":                          schema_pkg_apis_jenkinsio_v1_Postsubmit(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmits":                         schema_pkg_apis_jenkinsio_v1_Postsubmits(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmit":                           schema_pkg_apis_jenkinsio_v1_Presubmit(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmits":                          schema_pkg_apis_jenkinsio_v1_Presubmits(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PreviewActivityStep":                 schema_pkg_apis_jenkinsio_v1_PreviewActivityStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PreviewGitSpec":                      schema_pkg_apis_jenkinsio_v1_PreviewGitSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteActivityStep":                 schema_pkg_apis_jenkinsio_v1_PromoteActivityStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromotePullRequestStep":              schema_pkg_apis_jenkinsio_v1_PromotePullRequestStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteUpdateStep":                   schema_pkg_apis_jenkinsio_v1_PromoteUpdateStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteWorkflowStep":                 schema_pkg_apis_jenkinsio_v1_PromoteWorkflowStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicies":                  schema_pkg_apis_jenkinsio_v1_ProtectionPolicies(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy":                    schema_pkg_apis_jenkinsio_v1_ProtectionPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PullRequestInfo":                     schema_pkg_apis_jenkinsio_v1_PullRequestInfo(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Query":                               schema_pkg_apis_jenkinsio_v1_Query(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.QuickStartLocation":                  schema_pkg_apis_jenkinsio_v1_QuickStartLocation(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RegexpChangeMatcher":                 schema_pkg_apis_jenkinsio_v1_RegexpChangeMatcher(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Release":                             schema_pkg_apis_jenkinsio_v1_Release(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseList":                         schema_pkg_apis_jenkinsio_v1_ReleaseList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseSpec":                         schema_pkg_apis_jenkinsio_v1_ReleaseSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseStatus":                       schema_pkg_apis_jenkinsio_v1_ReleaseStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableMapOfStringContextPolicy": schema_pkg_apis_jenkinsio_v1_ReplaceableMapOfStringContextPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableMapOfStringString":        schema_pkg_apis_jenkinsio_v1_ReplaceableMapOfStringString(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfExternalPlugins":   schema_pkg_apis_jenkinsio_v1_ReplaceableSliceOfExternalPlugins(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings":           schema_pkg_apis_jenkinsio_v1_ReplaceableSliceOfStrings(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RepoContextPolicy":                   schema_pkg_apis_jenkinsio_v1_RepoContextPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference":                   schema_pkg_apis_jenkinsio_v1_ResourceReference(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Restrictions":                        schema_pkg_apis_jenkinsio_v1_Restrictions(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReviewPolicy":                        schema_pkg_apis_jenkinsio_v1_ReviewPolicy(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Scheduler":                           schema_pkg_apis_jenkinsio_v1_Scheduler(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerAgent":                      schema_pkg_apis_jenkinsio_v1_SchedulerAgent(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerList":                       schema_pkg_apis_jenkinsio_v1_SchedulerList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerSpec":                       schema_pkg_apis_jenkinsio_v1_SchedulerSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepository":                    schema_pkg_apis_jenkinsio_v1_SourceRepository(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroup":               schema_pkg_apis_jenkinsio_v1_SourceRepositoryGroup(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroupList":           schema_pkg_apis_jenkinsio_v1_SourceRepositoryGroupList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroupSpec":           schema_pkg_apis_jenkinsio_v1_SourceRepositoryGroupSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryList":                schema_pkg_apis_jenkinsio_v1_SourceRepositoryList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositorySpec":                schema_pkg_apis_jenkinsio_v1_SourceRepositorySpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.StageActivityStep":                   schema_pkg_apis_jenkinsio_v1_StageActivityStep(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Statement":                           schema_pkg_apis_jenkinsio_v1_Statement(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.StorageLocation":                     schema_pkg_apis_jenkinsio_v1_StorageLocation(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Team":                                schema_pkg_apis_jenkinsio_v1_Team(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamList":                            schema_pkg_apis_jenkinsio_v1_TeamList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamSettings":                        schema_pkg_apis_jenkinsio_v1_TeamSettings(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamSpec":                            schema_pkg_apis_jenkinsio_v1_TeamSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamStatus":                          schema_pkg_apis_jenkinsio_v1_TeamStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Trigger":                             schema_pkg_apis_jenkinsio_v1_Trigger(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.User":                                schema_pkg_apis_jenkinsio_v1_User(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails":                         schema_pkg_apis_jenkinsio_v1_UserDetails(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserList":                            schema_pkg_apis_jenkinsio_v1_UserList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserSpec":                            schema_pkg_apis_jenkinsio_v1_UserSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome":                             schema_pkg_apis_jenkinsio_v1_Welcome(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Workflow":                            schema_pkg_apis_jenkinsio_v1_Workflow(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowList":                        schema_pkg_apis_jenkinsio_v1_WorkflowList(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowPreconditions":               schema_pkg_apis_jenkinsio_v1_WorkflowPreconditions(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowSpec":                        schema_pkg_apis_jenkinsio_v1_WorkflowSpec(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowStatus":                      schema_pkg_apis_jenkinsio_v1_WorkflowStatus(ref),
		"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowStep":                        schema_pkg_apis_jenkinsio_v1_WorkflowStep(ref),
	}
}

func schema_pkg_apis_jenkinsio_v1_AccountReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AccountReference is a reference to a user account in another system that is attached to this user",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"provider": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_App(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "App is the metadata for an App",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AppSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AppSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_AppList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppList is a structure used by k8s to store lists of apps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.App"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.App", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_AppSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AppSpec provides details of the metadata for an App",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"schemaPreprocessor": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.Container"),
						},
					},
					"schemaPreprocessorRole": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/rbac/v1.Role"),
						},
					},
					"pipelineExtension": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineExtension"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineExtension", "k8s.io/api/core/v1.Container", "k8s.io/api/rbac/v1.Role"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Approve(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Approve specifies a configuration for a single approve.\n\nThe configuration for the approve plugin is defined as a list of these structures.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"issueRequired": {
						SchemaProps: spec.SchemaProps{
							Description: "IssueRequired indicates if an associated issue is required for approval in the specified repos.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"requireSelfApproval": {
						SchemaProps: spec.SchemaProps{
							Description: "RequireSelfApproval requires PR authors to explicitly approve their PRs. Otherwise the plugin assumes the author of the PR approves the changes in the PR.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"lgtmActsAsApprove": {
						SchemaProps: spec.SchemaProps{
							Description: "LgtmActsAsApprove indicates that the lgtm command should be used to indicate approval",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"ignoreReviewState": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreReviewState causes the approve plugin to ignore the GitHub review state. Otherwise: * an APPROVE github review is equivalent to leaving an \"/approve\" message. * A REQUEST_CHANGES github review is equivalent to leaving an /approve cancel\" message.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Attachment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"urls": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_BatchPipelineActivity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BatchPipelineActivity contains information about a batch build, used by both the batch build and its comprising PRs for linking them together",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"batchBuildNumber": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"batchBranchName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullRequestInfo": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PullRequestInfo"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PullRequestInfo"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Binary(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Binary provies the details of a downloadable binary",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"goarch": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"goos": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_BranchProtectionContextPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BranchProtectionContextPolicy configures required git provider contexts. Strict determines whether merging to the branch invalidates existing contexts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"contexts": {
						SchemaProps: spec.SchemaProps{
							Description: "Contexts appends required contexts that must be green to merge",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"strict": {
						SchemaProps: spec.SchemaProps{
							Description: "Strict overrides whether new commits in the base branch require updating the PR if set",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Brancher(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Brancher is for shared code between jobs that only run against certain branches. An empty brancher runs against all branches.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"skipBranches": {
						SchemaProps: spec.SchemaProps{
							Description: "Do not run against these branches. Default is no branches.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"branches": {
						SchemaProps: spec.SchemaProps{
							Description: "Only run against these branches. Default is all branches.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_BuildPack(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildPack represents a set of language specific build packs and associated quickstarts",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPackSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPackSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_BuildPackList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildPackList is a list of TypeMeta resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPack"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BuildPack", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_BuildPackSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BuildPackSpec is the specification of an BuildPack",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"label": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"quickstartLocations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.QuickStartLocation"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.QuickStartLocation"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ChartRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"repo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"repoName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommitStatus represents the commit statuses for a particular pull request",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitStatusCommitReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"gitUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullRequest": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sha": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitStatusDetails(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"pipelineActivity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"),
						},
					},
					"Items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusItem"),
									},
								},
							},
						},
					},
					"checked": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"commit": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusCommitReference"),
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"pipelineActivity", "checked", "commit", "context"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusCommitReference", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusItem", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitStatusItem(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pass": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"pass"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitStatusList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommitStatusList is a structure used by k8s to store lists of commit statuses",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"Items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatus"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "Items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitStatusSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommitStatusSpec provides details of a particular commit status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusDetails"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitStatusDetails"},
	}
}

func schema_pkg_apis_jenkinsio_v1_CommitSummary(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommitSummary is the summary of a commit",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sha": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"author": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
						},
					},
					"committer": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
						},
					},
					"branch": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"issueIds": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ConfigMapSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigMapSpec contains configuration options for the configMap being updated by the config-updater plugin.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of ConfigMap",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Description: "Key is the key in the ConfigMap to update with the file contents. If no explicit key is given, the basename of the file will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace in which the configMap needs to be deployed. If no namespace is specified it will be deployed to the ProwJobNamespace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"additional_namespaces": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespaces in which the configMap needs to be deployed, in addition to the above namespace provided, or the default if it is not set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ConfigUpdater(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigUpdater holds configuration for the config updater plugin",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"map": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigMapSpec"),
									},
								},
							},
						},
					},
					"configFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pluginFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ConfigMap": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigMapSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigMapSpec"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ContextPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContextPolicy configures options about how to handle various contexts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"skipUnknownContexts": {
						SchemaProps: spec.SchemaProps{
							Description: "whether to consider unknown contexts optional (skip) or required.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"requiredContexts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"requiredIfPresentContexts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"optionalContexts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"fromBranchProtection": {
						SchemaProps: spec.SchemaProps{
							Description: "Infer required and optional jobs from Branch Protection configuration",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_CoreActivityStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoreActivityStep is a base step included in Stages of a pipeline or other kinds of step",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_DependencyUpdate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DependencyUpdate describes an dependency update message from the commit log",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"repo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"component": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fromVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fromReleaseHTMLURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fromReleaseName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"toVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"toReleaseHTMLURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"toReleaseName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"paths": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdateDetails"),
												},
											},
										},
									},
								},
							},
						},
					},
				},
				Required: []string{"host", "owner", "repo", "url", "fromVersion", "fromReleaseHTMLURL", "fromReleaseName", "toVersion", "toReleaseHTMLURL", "toReleaseName"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdateDetails"},
	}
}

func schema_pkg_apis_jenkinsio_v1_DependencyUpdateDetails(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DependencyUpdateDetails are the details of a dependency update",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"repo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"component": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fromVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fromReleaseHTMLURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"fromReleaseName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"toVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"toReleaseHTMLURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"toReleaseName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"host", "owner", "repo", "url", "fromVersion", "fromReleaseHTMLURL", "fromReleaseName", "toVersion", "toReleaseHTMLURL", "toReleaseName"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_DeployOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeployOptions configures options for how to deploy applications by default such as using progressive delivery or using horizontal pod autoscaler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"canary": {
						SchemaProps: spec.SchemaProps{
							Description: "Canary should we enable canary rollouts (progressive delivery) for apps by default",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hpa": {
						SchemaProps: spec.SchemaProps{
							Description: "should we use the horizontal pod autoscaler on new apps by default?",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Environment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Environment represents an environment like Dev, Test, Staging, Production where code lives",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentFilter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentFilter specifies the environments to apply the role binding to",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"includes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"excludes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentList is a list of TypeMeta resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Environment"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Environment", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentRepository(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentRepository is the repository for an environment using GitOps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ref": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentRoleBinding is like a vanilla RoleBinding but applies to a set of Namespaces based on an Environment filter so that roles can be bound to multiple namespaces easily.\n\nFor example to specify the binding of roles on all Preview environments or on all permanent environments.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBindingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentRoleBindingList is a list of TypeMeta resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBinding"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRoleBinding", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentRoleBindingSpec is the specification of an EnvironmentRoleBinding",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"subjects": {
						SchemaProps: spec.SchemaProps{
							Description: "Subjects holds references to the objects the role applies to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/rbac/v1.Subject"),
									},
								},
							},
						},
					},
					"roleRef": {
						SchemaProps: spec.SchemaProps{
							Description: "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
							Ref:         ref("k8s.io/api/rbac/v1.RoleRef"),
						},
					},
					"environments": {
						SchemaProps: spec.SchemaProps{
							Description: "specifies which sets of environments this binding applies to",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentFilter"),
									},
								},
							},
						},
					},
				},
				Required: []string{"subjects", "roleRef"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentFilter", "k8s.io/api/rbac/v1.RoleRef", "k8s.io/api/rbac/v1.Subject"},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentRoleBindingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentRoleBindingStatus is the status for an EnvironmentRoleBinding resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentSpec is the specification of an Environment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"label": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cluster": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"promotionStrategy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRepository"),
						},
					},
					"order": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullRequestURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"teamSettings": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamSettings"),
						},
					},
					"previewGitInfo": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PreviewGitSpec"),
						},
					},
					"webHookEngine": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"remoteCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "RemoteCluster flag indicates if the Environment is deployed in a separate cluster to the Development Environment",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentRepository", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PreviewGitSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamSettings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EnvironmentStatus is the status for an Environment resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_EnvironmentVariable(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Extension(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Extension represents an extension available to this Jenkins X install",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionConfig is the configuration and enablement for an extension inside an app",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameterValue"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "namespace", "parameters"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameterValue"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionsConfigList contains a list of ExtensionConfig items",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"extensions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionConfig"),
									},
								},
							},
						},
					},
				},
				Required: []string{"extensions"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionConfig"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionDefinition defines an Extension",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"uuid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"when": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"given": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"children": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionChildReference"),
									},
								},
							},
						},
					},
					"scriptFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameter"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "namespace", "uuid"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionChildReference", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameter"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionChildReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionDefinitionChildReference provides a reference to a child",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"uuid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"remote": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionDefinitionList contains a list of ExtensionDefinition items",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"extensions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"extensions"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinition"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionRepositoryReference references a GitHub repo that contains extension definitions",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"remote": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"remote", "tag"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionDefinitionReferenceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionDefinitionReferenceList contains a list of ExtensionRepository items",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"remotes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionReference"),
									},
								},
							},
						},
					},
				},
				Required: []string{"remotes"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionDefinitionReference"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionExecution(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionExecution is an executable instance of an extension which can be attached into a pipeline for later execution. It differs from an Extension as it cannot have children and parameters have been resolved to environment variables",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"script": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"environmentVariables": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentVariable"),
									},
								},
							},
						},
					},
					"given": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"uuid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.EnvironmentVariable"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionList is a list of Extensions available for a team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Extension"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Extension", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionParameter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionParameter describes a parameter definition for an extension",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"environmentVariableName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultValue": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionParameterValue(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionRepositoryReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"github": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"chart": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ChartRef"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ChartRef"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionRepositoryReferenceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"repositories": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionRepositoryReference"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionRepositoryReference"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExtensionSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExtensionSpec provides details of an extension available for a team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"script": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"when": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"given": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"parameters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameter"),
									},
								},
							},
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"uuid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"children": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionParameter"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ExternalPlugin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExternalPlugin holds configuration for registering an external plugin.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the plugin.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint is the location of the external plugin. Defaults to the name of the plugin, ie. \"http://{{name}}\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"events": {
						SchemaProps: spec.SchemaProps{
							Description: "ReplaceableSliceOfStrings are the events that need to be demuxed by the hook server to the external plugin. If no events are specified, everything is sent.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Fact(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Fact represents observed facts. Apps will generate Facts about the system. A naming schema is required since each Fact has a name that's unique for the whole system. Apps should prefix their generated Facts with the name of the App, like <app-name>-<fact>. This makes that different Apps can't possibly have conflicting Fact names.\n\nFor an app generating facts on a pipeline, which will be have several different executions, we recommend <app>-<fact>-<pipeline>.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "The Fact labels will be used to query the API for interesting Facts. The Apps responsible for creating Facts need to add the relevant labels. For example, creating Facts on a pipeline would create Facts with the following labels {\n  subjectkind: PipelineActivity\n  pipelineName: my-org-my-app-master-23\n  org: my-org\n  repo: my-app\n  branch: master\n  buildNumber: 23\n}",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.FactStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_FactList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FactList is a list of Fact resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Fact"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Fact", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_FactSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FactSpec is the specification of a Fact",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"factType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"measurements": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Measurement"),
									},
								},
							},
						},
					},
					"statements": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Statement"),
									},
								},
							},
						},
					},
					"original": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Original"),
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"subject": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"),
						},
					},
				},
				Required: []string{"name", "factType", "subject"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Measurement", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Original", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Statement"},
	}
}

func schema_pkg_apis_jenkinsio_v1_FactStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FactStatus is the status for an Fact resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_GitService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitService represents a git provider so we can map the host name to a kinda of git service",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitServiceSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitServiceSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_GitServiceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitServiceList is a list of GitService resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitService"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitService", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_GitServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitServiceSpec is the specification of an GitService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gitKind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_GitStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GitStatus the status of a git commit in terms of CI/CD",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_GlobalProtectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalProtectionPolicy defines the default branch protection policy for the scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ProtectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy"),
						},
					},
					"protectTested": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_IssueLabel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"color": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_IssueSummary(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IssueSummary is the summary of an issue",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
						},
					},
					"assignees": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
									},
								},
							},
						},
					},
					"closedBy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueLabel"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueLabel", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_JobBase(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JobBase contains attributes common to all job types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the job. Must match regex [A-Za-z0-9-._]+ e.g. pull-test-infra-bazel-build",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "ReplaceableMapOfStringString are added to jobs and pods created for this job.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableMapOfStringString"),
						},
					},
					"maxConcurrency": {
						SchemaProps: spec.SchemaProps{
							Description: "MaximumConcurrency of this job, 0 implies no limit.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"agent": {
						SchemaProps: spec.SchemaProps{
							Description: "Agent that will take care of running this job.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cluster": {
						SchemaProps: spec.SchemaProps{
							Description: "Cluster is the alias of the cluster to run this job in. (Default: kube.DefaultClusterAlias)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the namespace in which pods schedule.\n  empty: results in scheduler.DefaultNamespace",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec is the Kubernetes pod spec used if Agent is kubernetes.",
							Ref:         ref("k8s.io/api/core/v1.PodSpec"),
						},
					},
				},
				Required: []string{"name", "agent"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableMapOfStringString", "k8s.io/api/core/v1.PodSpec"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Lgtm(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Lgtm specifies a configuration for a single lgtm. The configuration for the lgtm plugin is defined as a list of these structures.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reviewActsAsLgtm": {
						SchemaProps: spec.SchemaProps{
							Description: "ReviewActsAsLgtm indicates that a Github review of \"approve\" or \"request changes\" acts as adding or removing the lgtm label",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"storeTreeHash": {
						SchemaProps: spec.SchemaProps{
							Description: "StoreTreeHash indicates if tree_hash should be stored inside a comment to detect squashed commits before removing lgtm labels",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"trustedTeamForStickyLgtm": {
						SchemaProps: spec.SchemaProps{
							Description: "WARNING: This disables the security mechanism that prevents a malicious member (or compromised GitHub account) from merging arbitrary code. Use with caution.\n\nStickyLgtmTeam specifies the Github team whose members are trusted with sticky LGTM, which eliminates the need to re-lgtm minor fixes/updates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Measurement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Measurement is a percentage or a count, something measured that the system will capture within a fact",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"measurementType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"measurementValue": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "measurementType", "measurementValue"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Merger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Merger defines the options used to merge the PR",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "URL for status contexts.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prStatusBaseUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "PRStatusBaseURL is the base URL for the PR status page. This is used to link to a merge requirements overview in the status context.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"blockerLabel": {
						SchemaProps: spec.SchemaProps{
							Description: "BlockerLabel is an optional label that is used to identify merge blocking Git Provider issues. Leave this blank to disable this feature and save 1 API token per sync loop.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"squashLabel": {
						SchemaProps: spec.SchemaProps{
							Description: "SquashLabel is an optional label that is used to identify PRs that should always be squash merged. Leave this blank to disable this feature.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxGoroutines": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxGoroutines is the maximum number of goroutines spawned inside the controller to handle org/repo:branch pools. Defaults to 20. Needs to be a positive number.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"mergeMethod": {
						SchemaProps: spec.SchemaProps{
							Description: "Override the default method of merge. Valid options are squash, rebase, and merge.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"policy": {
						SchemaProps: spec.SchemaProps{
							Description: "ContextOptions defines the default merge options. If not set it will infer the required and optional contexts from the jobs configured and use the Git Provider combined status; otherwise it may apply the branch protection setting or let user define their own options in case branch protection is not used.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Original(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Original contains the report",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mimetype": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Periodic(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Periodic defines a job to be run periodically",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"JobBase": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase"),
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Description: "Interval to wait between two runs of the job.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cron": {
						SchemaProps: spec.SchemaProps{
							Description: "Cron representation of job trigger time",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "Tags for config entries",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
				},
				Required: []string{"interval", "cron"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Periodics(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Periodics is a list of jobs to be run periodically",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entries": {
						SchemaProps: spec.SchemaProps{
							Description: "Items are the post submit configurations",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodic"),
									},
								},
							},
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "Replace the existing entries",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodic"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineActivity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineActivity represents pipeline activity for a particular run of a pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivitySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivitySpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineActivityList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineActivityList is a list of PipelineActivity resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivity"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivity", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineActivitySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineActivitySpec is the specification of the pipeline activity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pipeline": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityStep"),
									},
								},
							},
						},
					},
					"buildUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildLogsUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRepository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitOwner": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitBranch": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"author": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"authorAvatarURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"authorURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullTitle": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"releaseNotesURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastCommitSHA": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastCommitMessage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastCommitURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"workflow": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated - Workflow functionality was removed and is obsolete Keeping these fields to ensure backwards compatibility Should be removed when we increment spec version",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workflowStatus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"workflowMessage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"postExtensions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionExecution"),
									},
								},
							},
						},
					},
					"attachments": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment"),
									},
								},
							},
						},
					},
					"batchPipelineActivity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BatchPipelineActivity"),
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"baseSHA": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BatchPipelineActivity", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExtensionExecution", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineActivityStep", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineActivityStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineActivityStatus is the status for an Environment resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineActivityStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineActivityStep represents a step in a pipeline activity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"stage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.StageActivityStep"),
						},
					},
					"promote": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteActivityStep"),
						},
					},
					"preview": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PreviewActivityStep"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PreviewActivityStep", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteActivityStep", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.StageActivityStep"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineExtension(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineExtension defines the image and command of an app which wants to modify/extend the pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the container specified as a DNS_LABEL.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint array. Not executed within a shell.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"args": {
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineStructure(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineStructure contains references to the Pipeline and PipelineRun, and a list of PipelineStructureStages in the pipeline. This allows us to map between a running Pod to its TaskRun, to the TaskRun's Task and PipelineRun, and finally from there to the stage and potential parent stages that the Pod is actually executing, for use with populating PipelineActivity and providing logs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"pipelineRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pipelineRunRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"stages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructureStage"),
									},
								},
							},
						},
					},
				},
				Required: []string{"pipelineRef", "pipelineRunRef"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructureStage", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineStructureList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineStructureList is a list of PipelineStructureList resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructure"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PipelineStructure", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PipelineStructureStage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PipelineStructureStage contains the stage's name, one of either a reference to the Task corresponding to the stage if it has steps, a list of sequential stage names nested within this stage, or a list of parallel stage names nested within this stage, and information on this stage's depth within the PipelineStructure as a whole, the name of its parent stage, if any, the name of the stage before it in execution order, if any, and the name of the stage after it in execution order, if any.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"taskRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Must have one of TaskRef+TaskRunRef, Stages, or Parallel",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"taskRunRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Populated during pod discovery, not at initial creation time.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"stages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"parallel": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"depth": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "byte",
						},
					},
					"parent": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"previous": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"next": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "depth"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Plugin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Plugin represents a binary plugin installed into this Jenkins X team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PluginSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PluginSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PluginList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PluginList is a list of Plugins available for a team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Plugin"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Plugin", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PluginSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PluginSpec provides details of a binary plugin available for a team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"subCommand": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"binaries": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Binary"),
									},
								},
							},
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Binary"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Postsubmit(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Postsubmit runs on push events.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"JobBase": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase"),
						},
					},
					"RegexpChangeMatcher": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RegexpChangeMatcher"),
						},
					},
					"Brancher": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Brancher"),
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "Context is the name of the GitHub status context for the job.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"report": {
						SchemaProps: spec.SchemaProps{
							Description: "Report will comment and set status on GitHub.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"context"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Brancher", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RegexpChangeMatcher"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Postsubmits(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Postsubmits is a list of Postsubmit job configurations that can optionally completely replace the Postsubmit job configurations in the parent scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entries": {
						SchemaProps: spec.SchemaProps{
							Description: "Items are the post submit configurations",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmit"),
									},
								},
							},
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "Replace the existing entries",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmit"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Presubmit(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Presubmit defines a job configuration for pull requests",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"JobBase": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase"),
						},
					},
					"Brancher": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Brancher"),
						},
					},
					"RegexpChangeMatcher": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RegexpChangeMatcher"),
						},
					},
					"alwaysRun": {
						SchemaProps: spec.SchemaProps{
							Description: "AlwaysRun automatically for every PR, or only when a comment triggers it. By default true.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"context": {
						SchemaProps: spec.SchemaProps{
							Description: "Context is the name of the Git Provider status context for the job.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"optional": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional indicates that the job's status context should not be required for merge. By default false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"report": {
						SchemaProps: spec.SchemaProps{
							Description: "Report enables reporting the job status on the git provider",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"trigger": {
						SchemaProps: spec.SchemaProps{
							Description: "Trigger is the regular expression to trigger the job. e.g. `@k8s-bot e2e test this` RerunCommand must also be specified if this field is specified. (Default: `(?m)^/test (?:.*? )?<job name>(?: .*?)?$`)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rerunCommand": {
						SchemaProps: spec.SchemaProps{
							Description: "The RerunCommand to give users. Must match Trigger. Trigger must also be specified if this field is specified. (Default: `/test <job name>`)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mergeMethod": {
						SchemaProps: spec.SchemaProps{
							Description: "Override the default method of merge. Valid options are squash, rebase, and merge.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"queries": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Query"),
									},
								},
							},
						},
					},
					"policy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicies"),
						},
					},
					"context_options": {
						SchemaProps: spec.SchemaProps{
							Description: "ContextOptions defines the merge options. If not set it will infer the required and optional contexts from the jobs configured and use the Git Provider combined status; otherwise it may apply the branch protection setting or let user define their own options in case branch protection is not used.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RepoContextPolicy"),
						},
					},
				},
				Required: []string{"alwaysRun", "context", "trigger", "rerunCommand"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Brancher", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.JobBase", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicies", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Query", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RegexpChangeMatcher", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.RepoContextPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Presubmits(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Presubmits is a list of Presubmit job configurations that can optionally completely replace the Presubmit job configurations in the parent scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entries": {
						SchemaProps: spec.SchemaProps{
							Description: "Items are the Presubmit configurtations",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmit"),
									},
								},
							},
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "Replace the existing entries",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmit"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PreviewActivityStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PreviewActivityStep is the step of creating a preview environment as part of a Pull Request pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullRequestURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"applicationURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PreviewGitSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PreviewGitSpec is the preview git branch/pull request details",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserSpec"),
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildStatus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildStatusUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"appName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"applicationURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserSpec"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PromoteActivityStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PromoteActivityStep is the step of promoting a version of an application to an environment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullRequest": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromotePullRequestStep"),
						},
					},
					"update": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteUpdateStep"),
						},
					},
					"applicationURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromotePullRequestStep", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteUpdateStep", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PromotePullRequestStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PromotePullRequestStep is the step for promoting a version to an environment by raising a Pull Request on the git repository of the environment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"pullRequestURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mergeCommitSHA": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PromoteUpdateStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PromoteUpdateStep is the step for updating a promotion after the Pull Request merges to master",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"statuses": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GitStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PromoteWorkflowStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PromoteWorkflowStep is the step of promoting a version of an application to an environment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ProtectionPolicies(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProtectionPolicies defines the branch protection policies",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ProtectionPolicy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy"),
						},
					},
					"Replace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"entries": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ProtectionPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProtectionPolicy for merging.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"protect": {
						SchemaProps: spec.SchemaProps{
							Description: "Protect overrides whether branch protection is enabled if set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"requiredStatusChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "RequiredStatusChecks configures github contexts",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BranchProtectionContextPolicy"),
						},
					},
					"enforceAdmins": {
						SchemaProps: spec.SchemaProps{
							Description: "Admins overrides whether protections apply to admins if set.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"restrictions": {
						SchemaProps: spec.SchemaProps{
							Description: "Restrictions limits who can merge",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Restrictions"),
						},
					},
					"requiredPullRequestReviews": {
						SchemaProps: spec.SchemaProps{
							Description: "RequiredPullRequestReviews specifies approval/review criteria.",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReviewPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.BranchProtectionContextPolicy", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Restrictions", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReviewPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_PullRequestInfo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PullRequestInfo contains information about a PR included in a batch, like its PR number, the last build number, and SHA",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pullRequestNumber": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastBuildNumberForCommit": {
						SchemaProps: spec.SchemaProps{
							Description: "LastBuildNumberForCommit is the number of the last successful build of this PR outside of a batch",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastBuildSHA": {
						SchemaProps: spec.SchemaProps{
							Description: "LastBuildSHA is the commit SHA in the last successful build of this PR outside of a batch.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Query(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Query is turned into a Git Provider search query. See the docs for details: https://help.github.com/articles/searching-issues-and-pull-requests/",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"excludedBranches": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"includedBranches": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"missingLabels": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"milestone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reviewApprovedRequired": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_QuickStartLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "QuickStartLocation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"gitUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitKind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"includes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"excludes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_RegexpChangeMatcher(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RegexpChangeMatcher is for code shared between jobs that run only when certain files are changed.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"runIfChanged": {
						SchemaProps: spec.SchemaProps{
							Description: "RunIfChanged defines a regex used to select which subset of file changes should trigger this job. If any file in the changeset matches this regex, the job will be triggered",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Release(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Release represents a single version of an app that has been released",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReleaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReleaseList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReleaseList is a list of Release resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Release"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Release", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReleaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReleaseSpec is the specification of the Release",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitHttpUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitCloneUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"commits": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitSummary"),
									},
								},
							},
						},
					},
					"issues": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueSummary"),
									},
								},
							},
						},
					},
					"pullRequests": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueSummary"),
									},
								},
							},
						},
					},
					"dependencyUpdates": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdate"),
									},
								},
							},
						},
					},
					"releaseNotesURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitRepository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitOwner": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CommitSummary", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdate", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.IssueSummary"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReleaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReleaseStatus is the status of a release",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReplaceableMapOfStringContextPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplaceableMapOfStringContextPolicy is a map of context policies that can optionally completely replace any context policies defined in the parent scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"Items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy"),
									},
								},
							},
						},
					},
				},
				Required: []string{"Items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReplaceableMapOfStringString(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplaceableMapOfStringString is a map of strings that can optionally completely replace the map of strings in the parent scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entries": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "Replace the existing entries",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReplaceableSliceOfExternalPlugins(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplaceableSliceOfExternalPlugins is a list of external plugins that can optionally completely replace the plugins in any parent SchedulerSpec",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Replace": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"entries": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExternalPlugin"),
									},
								},
							},
						},
					},
				},
				Required: []string{"Replace"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExternalPlugin"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReplaceableSliceOfStrings(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReplaceableSliceOfStrings is a slice of strings that can optionally completely replace the slice of strings defined in the parent scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"entries": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the string values",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"replace": {
						SchemaProps: spec.SchemaProps{
							Description: "Replace the existing entries",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_RepoContextPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RepoContextPolicy overrides the policy for repo, and any branch overrides.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ContextPolicy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy"),
						},
					},
					"branches": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableMapOfStringContextPolicy"),
						},
					},
				},
				Required: []string{"ContextPolicy"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableMapOfStringContextPolicy"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ResourceReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"kind", "name"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Restrictions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Restrictions limits who can merge Users and Teams entries are appended to parent lists.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"users": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"teams": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
				},
				Required: []string{"users", "teams"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"},
	}
}

func schema_pkg_apis_jenkinsio_v1_ReviewPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ReviewPolicy specifies git provider approval/review criteria. Any nil values inherit the policy from the parent, otherwise bool/ints are overridden. Non-empty lists are appended to parent lists.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dismissalRestrictions": {
						SchemaProps: spec.SchemaProps{
							Description: "Restrictions appends users/teams that are allowed to merge",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Restrictions"),
						},
					},
					"dismissStaleReviews": {
						SchemaProps: spec.SchemaProps{
							Description: "DismissStale overrides whether new commits automatically dismiss old reviews if set",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"requireCodeOwnerReviews": {
						SchemaProps: spec.SchemaProps{
							Description: "RequireOwners overrides whether CODEOWNERS must approve PRs if set",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"requiredApprovingReviewCount": {
						SchemaProps: spec.SchemaProps{
							Description: "Approvals overrides the number of approvals required if set (set to 0 to disable)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Restrictions"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Scheduler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Scheduler is configuration for a pipeline scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SchedulerAgent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SchedulerAgent defines the scheduler agent configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"agent": {
						SchemaProps: spec.SchemaProps{
							Description: "Agent defines the agent used to schedule jobs, by default Prow",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"agent"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_SchedulerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SchedulerList is a list of configurations for a pipeline scheduler",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Scheduler"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Scheduler", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SchedulerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SchedulerSpec defines the pipeline scheduler (e.g. Prow) configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"schedulerAgent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerAgent"),
						},
					},
					"policy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GlobalProtectionPolicy"),
						},
					},
					"presubmits": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmits"),
						},
					},
					"postsubmits": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmits"),
						},
					},
					"trigger": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Trigger"),
						},
					},
					"approve": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Approve"),
						},
					},
					"lgtm": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Lgtm"),
						},
					},
					"externalPlugins": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfExternalPlugins"),
						},
					},
					"merger": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Merger"),
						},
					},
					"plugins": {
						SchemaProps: spec.SchemaProps{
							Description: "Plugins is a list of plugin names enabled for a repo",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings"),
						},
					},
					"configUpdater": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigUpdater"),
						},
					},
					"welcome": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome"),
									},
								},
							},
						},
					},
					"periodics": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodics"),
						},
					},
					"attachments": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Approve", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigUpdater", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.GlobalProtectionPolicy", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Lgtm", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Merger", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodics", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmits", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmits", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfExternalPlugins", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ReplaceableSliceOfStrings", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SchedulerAgent", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Trigger", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SourceRepository(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceRepository is the metadata for an Application/Project/SourceRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositorySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositorySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SourceRepositoryGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceRepositoryGroup is the metadata for an Application/Project/SourceRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroupSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroupSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SourceRepositoryGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceRepositoryGroupList is a structure used by k8s to store lists of apps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepositoryGroup", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SourceRepositoryGroupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceRepositoryGroupSpec is the metadata for an Application/Project/SourceRepository",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"repositories": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"),
									},
								},
							},
						},
					},
					"scheduler": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"),
						},
					},
				},
				Required: []string{"repositories", "scheduler"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SourceRepositoryList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceRepositoryList is a structure used by k8s to store lists of apps",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepository"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.SourceRepository", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_SourceRepositorySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SourceRepositorySpec provides details of the metadata for an App",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider stores the URL of the git provider such as https://github.com",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"org": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"repo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"providerName": {
						SchemaProps: spec.SchemaProps{
							Description: "ProviderName is a logical name for the provider without any URL scheme which can be used in a label selector",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"providerKind": {
						SchemaProps: spec.SchemaProps{
							Description: "ProviderKind is the kind of provider (github / bitbucketcloud / bitbucketserver etc)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "URL is the web URL of the project page",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sshCloneURL": {
						SchemaProps: spec.SchemaProps{
							Description: "SSHCloneURL is the git URL to clone this repository using SSH",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpCloneURL": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTPCloneURL is the git URL to clone this repository using HTTP/HTTPS",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"scheduler": {
						SchemaProps: spec.SchemaProps{
							Description: "Scheduler a reference to a custom scheduler otherwise we default to the Team's Scededuler",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"},
	}
}

func schema_pkg_apis_jenkinsio_v1_StageActivityStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StageActivityStep represents a stage of zero to more sub steps in a jenkins pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"startedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"completedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CoreActivityStep"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.CoreActivityStep", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_Statement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Statement represents a decision that was made, for example that a promotion was approved or denied",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"statementType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"measurementValue": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "statementType", "measurementValue"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_StorageLocation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StorageLocation",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"classifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitBranch": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucketUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Team(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Team represents a request to create an actual Team which is a group of users, a development environment and optional other environments",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.TeamStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_TeamList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TeamList is a list of TypeMeta resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Team"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Team", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_TeamSettings(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TeamSettings the default settings for a team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"useGitOps": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"askOnCreate": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"branchPatterns": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"forkBranchPatterns": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"quickstartLocations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.QuickStartLocation"),
									},
								},
							},
						},
					},
					"buildPackUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildPackRef": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"helmBinary": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"postPreviewJobs": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/batch/v1.Job"),
									},
								},
							},
						},
					},
					"promotionEngine": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"noTiller": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"helmTemplate": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"gitServer": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"organisation": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"envOrganisation": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pipelineUsername": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pipelineUserEmail": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"dockerRegistryOrg": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitPublic": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"kubeProvider": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"appsRepository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildPackName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"storageLocations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.StorageLocation"),
									},
								},
							},
						},
					},
					"deployKind": {
						SchemaProps: spec.SchemaProps{
							Description: "DeployKind what kind of deployment (\"default\" uses regular Kubernetes Services and Deployments, \"knative\" uses the Knative Service resource instead)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"importMode": {
						SchemaProps: spec.SchemaProps{
							Description: "ImportMode indicates what kind of",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prowEngine": {
						SchemaProps: spec.SchemaProps{
							Description: "ProwEngine is the kind of prow engine used such as knative build or build pipeline",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versionStreamUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "VersionStreamURL contains the git clone URL for the Version Stream which is the set of versions to use for charts, images, packages etc",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versionStreamRef": {
						SchemaProps: spec.SchemaProps{
							Description: "VersionStreamRef contains the git ref (tag or branch) in the VersionStreamURL repository to use as the version stream",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appPrefixes": {
						SchemaProps: spec.SchemaProps{
							Description: "AppsPrefixes is the list of prefixes for appNames",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"defaultScheduler": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference"),
						},
					},
					"prowConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "ProwConfig is the way we manage prow configurations",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"profile": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile is the profile in use (see jx profile)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bootRequirements": {
						SchemaProps: spec.SchemaProps{
							Description: "BootRequirements is a marshaled string of the jx-requirements.yml used in the most recent run for this cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deployOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "DeployOptions configures options for how to deploy applications by default such as using canary rollouts (progressive delivery) or using horizontal pod autoscaler",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DeployOptions"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DeployOptions", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.QuickStartLocation", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ResourceReference", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.StorageLocation", "k8s.io/api/batch/v1.Job"},
	}
}

func schema_pkg_apis_jenkinsio_v1_TeamSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TeamSpec is the specification of an Team",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"label": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_TeamStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TeamStatus is the status for an Team resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"provisionStatus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Trigger(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Trigger specifies a configuration for a single trigger.\n\nThe configuration for the trigger plugin is defined as a list of these structures.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"trustedOrg": {
						SchemaProps: spec.SchemaProps{
							Description: "TrustedOrg is the org whose members' PRs will be automatically built for PRs to the above repos. The default is the PR's org.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"joinOrgUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "JoinOrgURL is a link that redirects users to a location where they should be able to read more about joining the organization in order to become trusted members. Defaults to the Github link of TrustedOrg.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"onlyOrgMembers": {
						SchemaProps: spec.SchemaProps{
							Description: "OnlyOrgMembers requires PRs and/or /ok-to-test comments to come from org members. By default, trigger also include repo collaborators.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"ignoreOkToTest": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreOkToTest makes trigger ignore /ok-to-test comments. This is a security mitigation to only allow testing from trusted users.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_User(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "User represents a git user so we have a cache to find by email address",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated, use Spec",
							Ref:         ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.UserDetails", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_UserDetails(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserDetails containers details of a user",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"login": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"avatarUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"accountReference": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AccountReference"),
									},
								},
							},
						},
					},
					"externalUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.AccountReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_jenkinsio_v1_UserList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserList is a list of User resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.User"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.User", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_UserSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UserSpec is the user details",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"linkUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Welcome(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Welcome welcome plugin config",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"message_template": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_Workflow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Workflow represents pipeline activity for a particular run of a pipeline",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowSpec", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_WorkflowList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkflowList is a list of Workflow resources",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Workflow"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Workflow", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_jenkinsio_v1_WorkflowPreconditions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkflowPreconditions is the trigger to start a step",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"environments": {
						SchemaProps: spec.SchemaProps{
							Description: "the names of the environments which need to have promoted before this step can be triggered",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_WorkflowSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkflowSpec is the specification of the pipeline activity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pipeline": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowStep"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowStep"},
	}
}

func schema_pkg_apis_jenkinsio_v1_WorkflowStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkflowStatus is the status for an Environment resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_jenkinsio_v1_WorkflowStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkflowStep represents a step in a pipeline activity",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"trigger": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowPreconditions"),
						},
					},
					"promote": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteWorkflowStep"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.PromoteWorkflowStep", "github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.WorkflowPreconditions"},
	}
}
