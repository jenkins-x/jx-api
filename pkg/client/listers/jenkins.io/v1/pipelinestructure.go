/*
Copyright 2020 The Jenkins X Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jenkins-x/jx-api/v3/pkg/apis/jenkins.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineStructureLister helps list PipelineStructures.
// All objects returned here must be treated as read-only.
type PipelineStructureLister interface {
	// List lists all PipelineStructures in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PipelineStructure, err error)
	// PipelineStructures returns an object that can list and get PipelineStructures.
	PipelineStructures(namespace string) PipelineStructureNamespaceLister
	PipelineStructureListerExpansion
}

// pipelineStructureLister implements the PipelineStructureLister interface.
type pipelineStructureLister struct {
	indexer cache.Indexer
}

// NewPipelineStructureLister returns a new PipelineStructureLister.
func NewPipelineStructureLister(indexer cache.Indexer) PipelineStructureLister {
	return &pipelineStructureLister{indexer: indexer}
}

// List lists all PipelineStructures in the indexer.
func (s *pipelineStructureLister) List(selector labels.Selector) (ret []*v1.PipelineStructure, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PipelineStructure))
	})
	return ret, err
}

// PipelineStructures returns an object that can list and get PipelineStructures.
func (s *pipelineStructureLister) PipelineStructures(namespace string) PipelineStructureNamespaceLister {
	return pipelineStructureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineStructureNamespaceLister helps list and get PipelineStructures.
// All objects returned here must be treated as read-only.
type PipelineStructureNamespaceLister interface {
	// List lists all PipelineStructures in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PipelineStructure, err error)
	// Get retrieves the PipelineStructure from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PipelineStructure, error)
	PipelineStructureNamespaceListerExpansion
}

// pipelineStructureNamespaceLister implements the PipelineStructureNamespaceLister
// interface.
type pipelineStructureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineStructures in the indexer for a given namespace.
func (s pipelineStructureNamespaceLister) List(selector labels.Selector) (ret []*v1.PipelineStructure, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PipelineStructure))
	})
	return ret, err
}

// Get retrieves the PipelineStructure from the indexer for a given namespace and name.
func (s pipelineStructureNamespaceLister) Get(name string) (*v1.PipelineStructure, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("pipelinestructure"), name)
	}
	return obj.(*v1.PipelineStructure), nil
}
