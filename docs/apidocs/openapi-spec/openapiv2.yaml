definitions:
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.AccountReference:
    description: AccountReference is a reference to a user account in another system
      that is attached to this user
    properties:
      id:
        type: string
      provider:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.App:
    description: App is the metadata for an App
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.AppSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.AppList:
    description: AppList is a structure used by k8s to store lists of apps
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.App'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.AppSpec:
    description: AppSpec provides details of the metadata for an App
    properties:
      pipelineExtension:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineExtension'
      schemaPreprocessor:
        $ref: '#/definitions/io.k8s.api.core.v1.Container'
      schemaPreprocessorRole:
        $ref: '#/definitions/io.k8s.api.rbac.v1.Role'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Approve:
    description: |-
      Approve specifies a configuration for a single approve.

      The configuration for the approve plugin is defined as a list of these structures.
    properties:
      ignoreReviewState:
        description: 'IgnoreReviewState causes the approve plugin to ignore the GitHub
          review state. Otherwise: * an APPROVE github review is equivalent to leaving
          an "/approve" message. * A REQUEST_CHANGES github review is equivalent to
          leaving an /approve cancel" message.'
        type: boolean
      issueRequired:
        description: IssueRequired indicates if an associated issue is required for
          approval in the specified repos.
        type: boolean
      lgtmActsAsApprove:
        description: LgtmActsAsApprove indicates that the lgtm command should be used
          to indicate approval
        type: boolean
      requireSelfApproval:
        description: RequireSelfApproval requires PR authors to explicitly approve
          their PRs. Otherwise the plugin assumes the author of the PR approves the
          changes in the PR.
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Attachment:
    properties:
      name:
        type: string
      urls:
        items:
          type: string
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BatchPipelineActivity:
    description: BatchPipelineActivity contains information about a batch build, used
      by both the batch build and its comprising PRs for linking them together
    properties:
      batchBranchName:
        type: string
      batchBuildNumber:
        type: string
      pullRequestInfo:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PullRequestInfo'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Binary:
    description: Binary provies the details of a downloadable binary
    properties:
      goarch:
        type: string
      goos:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BranchProtectionContextPolicy:
    description: BranchProtectionContextPolicy configures required git provider contexts.
      Strict determines whether merging to the branch invalidates existing contexts.
    properties:
      contexts:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
        description: Contexts appends required contexts that must be green to merge
      strict:
        description: Strict overrides whether new commits in the base branch require
          updating the PR if set
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Brancher:
    description: Brancher is for shared code between jobs that only run against certain
      branches. An empty brancher runs against all branches.
    properties:
      branches:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
        description: Only run against these branches. Default is all branches.
      skipBranches:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
        description: Do not run against these branches. Default is no branches.
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BuildPack:
    description: BuildPack represents a set of language specific build packs and associated
      quickstarts
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BuildPackSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BuildPackList:
    description: BuildPackList is a list of TypeMeta resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BuildPack'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BuildPackSpec:
    description: BuildPackSpec is the specification of an BuildPack
    properties:
      gitRef:
        type: string
      gitUrl:
        type: string
      label:
        type: string
      quickstartLocations:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.QuickStartLocation'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ChartRef:
    properties:
      name:
        type: string
      repo:
        type: string
      repoName:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatus:
    description: CommitStatus represents the commit statuses for a particular pull
      request
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusCommitReference:
    properties:
      gitUrl:
        type: string
      pullRequest:
        type: string
      sha:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusDetails:
    properties:
      Items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusItem'
        type: array
      checked:
        type: boolean
      commit:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusCommitReference'
      context:
        type: string
      pipelineActivity:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference'
    required:
    - pipelineActivity
    - checked
    - commit
    - context
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusItem:
    properties:
      description:
        type: string
      name:
        type: string
      pass:
        type: boolean
    required:
    - pass
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusList:
    description: CommitStatusList is a structure used by k8s to store lists of commit
      statuses
    properties:
      Items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatus'
        type: array
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - Items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusSpec:
    description: CommitStatusSpec provides details of a particular commit status
    properties:
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitStatusDetails'
        type: array
    required:
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitSummary:
    description: CommitSummary is the summary of a commit
    properties:
      author:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
      branch:
        type: string
      committer:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
      issueIds:
        items:
          type: string
        type: array
      message:
        type: string
      sha:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ConfigMapSpec:
    description: ConfigMapSpec contains configuration options for the configMap being
      updated by the config-updater plugin.
    properties:
      additional_namespaces:
        description: Namespaces in which the configMap needs to be deployed, in addition
          to the above namespace provided, or the default if it is not set.
        items:
          type: string
        type: array
      key:
        description: Key is the key in the ConfigMap to update with the file contents.
          If no explicit key is given, the basename of the file will be used.
        type: string
      name:
        description: Name of ConfigMap
        type: string
      namespace:
        description: Namespace in which the configMap needs to be deployed. If no
          namespace is specified it will be deployed to the ProwJobNamespace.
        type: string
    required:
    - name
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ConfigUpdater:
    description: ConfigUpdater holds configuration for the config updater plugin
    properties:
      ConfigMap:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ConfigMapSpec'
      configFile:
        type: string
      map:
        additionalProperties:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ConfigMapSpec'
        type: object
      pluginFile:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ContextPolicy:
    description: ContextPolicy configures options about how to handle various contexts.
    properties:
      fromBranchProtection:
        description: Infer required and optional jobs from Branch Protection configuration
        type: boolean
      optionalContexts:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      requiredContexts:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      requiredIfPresentContexts:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      skipUnknownContexts:
        description: whether to consider unknown contexts optional (skip) or required.
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CoreActivityStep:
    description: CoreActivityStep is a base step included in Stages of a pipeline
      or other kinds of step
    properties:
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description:
        type: string
      name:
        type: string
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.DependencyUpdate:
    description: DependencyUpdate describes an dependency update message from the
      commit log
    properties:
      component:
        type: string
      fromReleaseHTMLURL:
        type: string
      fromReleaseName:
        type: string
      fromVersion:
        type: string
      host:
        type: string
      owner:
        type: string
      paths:
        items:
          items:
            $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.DependencyUpdateDetails'
          type: array
        type: array
      repo:
        type: string
      toReleaseHTMLURL:
        type: string
      toReleaseName:
        type: string
      toVersion:
        type: string
      url:
        type: string
    required:
    - host
    - owner
    - repo
    - url
    - fromVersion
    - fromReleaseHTMLURL
    - fromReleaseName
    - toVersion
    - toReleaseHTMLURL
    - toReleaseName
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.DependencyUpdateDetails:
    description: DependencyUpdateDetails are the details of a dependency update
    properties:
      component:
        type: string
      fromReleaseHTMLURL:
        type: string
      fromReleaseName:
        type: string
      fromVersion:
        type: string
      host:
        type: string
      owner:
        type: string
      repo:
        type: string
      toReleaseHTMLURL:
        type: string
      toReleaseName:
        type: string
      toVersion:
        type: string
      url:
        type: string
    required:
    - host
    - owner
    - repo
    - url
    - fromVersion
    - fromReleaseHTMLURL
    - fromReleaseName
    - toVersion
    - toReleaseHTMLURL
    - toReleaseName
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.DeployOptions:
    description: DeployOptions configures options for how to deploy applications by
      default such as using progressive delivery or using horizontal pod autoscaler
    properties:
      canary:
        description: Canary should we enable canary rollouts (progressive delivery)
          for apps by default
        type: boolean
      hpa:
        description: should we use the horizontal pod autoscaler on new apps by default?
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Environment:
    description: Environment represents an environment like Dev, Test, Staging, Production
      where code lives
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentSpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentFilter:
    description: EnvironmentFilter specifies the environments to apply the role binding
      to
    properties:
      excludes:
        items:
          type: string
        type: array
      includes:
        items:
          type: string
        type: array
      kind:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentList:
    description: EnvironmentList is a list of TypeMeta resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Environment'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRepository:
    description: EnvironmentRepository is the repository for an environment using
      GitOps
    properties:
      kind:
        type: string
      ref:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBinding:
    description: |-
      EnvironmentRoleBinding is like a vanilla RoleBinding but applies to a set of Namespaces based on an Environment filter so that roles can be bound to multiple namespaces easily.

      For example to specify the binding of roles on all Preview environments or on all permanent environments.
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBindingSpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBindingStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBindingList:
    description: EnvironmentRoleBindingList is a list of TypeMeta resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBinding'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBindingSpec:
    description: EnvironmentRoleBindingSpec is the specification of an EnvironmentRoleBinding
    properties:
      environments:
        description: specifies which sets of environments this binding applies to
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentFilter'
        type: array
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: RoleRef can reference a Role in the current namespace or a ClusterRole
          in the global namespace. If the RoleRef cannot be resolved, the Authorizer
          must return an error.
      subjects:
        description: Subjects holds references to the objects the role applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
    required:
    - subjects
    - roleRef
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRoleBindingStatus:
    description: EnvironmentRoleBindingStatus is the status for an EnvironmentRoleBinding
      resource
    properties:
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentSpec:
    description: EnvironmentSpec is the specification of an Environment
    properties:
      cluster:
        type: string
      kind:
        type: string
      label:
        type: string
      namespace:
        type: string
      order:
        format: int32
        type: integer
      previewGitInfo:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PreviewGitSpec'
      promotionStrategy:
        type: string
      pullRequestURL:
        type: string
      remoteCluster:
        description: RemoteCluster flag indicates if the Environment is deployed in
          a separate cluster to the Development Environment
        type: boolean
      source:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentRepository'
      teamSettings:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamSettings'
      webHookEngine:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentStatus:
    description: EnvironmentStatus is the status for an Environment resource
    properties:
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentVariable:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Extension:
    description: Extension represents an extension available to this Jenkins X install
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionConfig:
    description: ExtensionConfig is the configuration and enablement for an extension
      inside an app
    properties:
      name:
        type: string
      namespace:
        type: string
      parameters:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionParameterValue'
        type: array
    required:
    - name
    - namespace
    - parameters
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionConfigList:
    description: ExtensionsConfigList contains a list of ExtensionConfig items
    properties:
      extensions:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionConfig'
        type: array
    required:
    - extensions
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinition:
    description: ExtensionDefinition defines an Extension
    properties:
      children:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinitionChildReference'
        type: array
      description:
        type: string
      given:
        type: string
      name:
        type: string
      namespace:
        type: string
      parameters:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionParameter'
        type: array
      scriptFile:
        type: string
      uuid:
        type: string
      when:
        items:
          type: string
        type: array
    required:
    - name
    - namespace
    - uuid
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinitionChildReference:
    description: ExtensionDefinitionChildReference provides a reference to a child
    properties:
      name:
        type: string
      namespace:
        type: string
      remote:
        type: string
      tag:
        type: string
      uuid:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinitionList:
    description: ExtensionDefinitionList contains a list of ExtensionDefinition items
    properties:
      extensions:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinition'
        type: array
      version:
        type: string
    required:
    - extensions
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinitionReference:
    description: ExtensionRepositoryReference references a GitHub repo that contains
      extension definitions
    properties:
      remote:
        type: string
      tag:
        type: string
    required:
    - remote
    - tag
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinitionReferenceList:
    description: ExtensionDefinitionReferenceList contains a list of ExtensionRepository
      items
    properties:
      remotes:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionDefinitionReference'
        type: array
    required:
    - remotes
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionExecution:
    description: ExtensionExecution is an executable instance of an extension which
      can be attached into a pipeline for later execution. It differs from an Extension
      as it cannot have children and parameters have been resolved to environment
      variables
    properties:
      description:
        type: string
      environmentVariables:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.EnvironmentVariable'
        type: array
      given:
        type: string
      name:
        type: string
      namespace:
        type: string
      script:
        type: string
      uuid:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionList:
    description: ExtensionList is a list of Extensions available for a team
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Extension'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionParameter:
    description: ExtensionParameter describes a parameter definition for an extension
    properties:
      defaultValue:
        type: string
      description:
        type: string
      environmentVariableName:
        type: string
      name:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionParameterValue:
    properties:
      name:
        type: string
      value:
        type: string
    required:
    - name
    - value
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionRepositoryReference:
    properties:
      chart:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ChartRef'
      github:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionRepositoryReferenceList:
    properties:
      repositories:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionRepositoryReference'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionSpec:
    description: ExtensionSpec provides details of an extension available for a team
    properties:
      children:
        items:
          type: string
        type: array
      description:
        type: string
      given:
        type: string
      name:
        type: string
      namespace:
        type: string
      parameters:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionParameter'
        type: array
      script:
        type: string
      uuid:
        type: string
      version:
        type: string
      when:
        items:
          type: string
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExternalPlugin:
    description: ExternalPlugin holds configuration for registering an external plugin.
    properties:
      endpoint:
        description: Endpoint is the location of the external plugin. Defaults to
          the name of the plugin, ie. "http://{{name}}".
        type: string
      events:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
        description: ReplaceableSliceOfStrings are the events that need to be demuxed
          by the hook server to the external plugin. If no events are specified, everything
          is sent.
      name:
        description: Name of the plugin.
        type: string
    required:
    - name
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Fact:
    description: |-
      Fact represents observed facts. Apps will generate Facts about the system. A naming schema is required since each Fact has a name that's unique for the whole system. Apps should prefix their generated Facts with the name of the App, like <app-name>-<fact>. This makes that different Apps can't possibly have conflicting Fact names.

      For an app generating facts on a pipeline, which will be have several different executions, we recommend <app>-<fact>-<pipeline>.
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: |-
          The Fact labels will be used to query the API for interesting Facts. The Apps responsible for creating Facts need to add the relevant labels. For example, creating Facts on a pipeline would create Facts with the following labels {
            subjectkind: PipelineActivity
            pipelineName: my-org-my-app-master-23
            org: my-org
            repo: my-app
            branch: master
            buildNumber: 23
          }
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.FactSpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.FactStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.FactList:
    description: FactList is a list of Fact resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Fact'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.FactSpec:
    description: FactSpec is the specification of a Fact
    properties:
      factType:
        type: string
      measurements:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Measurement'
        type: array
      name:
        type: string
      original:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Original'
      statements:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Statement'
        type: array
      subject:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference'
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - factType
    - subject
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.FactStatus:
    description: FactStatus is the status for an Fact resource
    properties:
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitService:
    description: GitService represents a git provider so we can map the host name
      to a kinda of git service
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitServiceSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitServiceList:
    description: GitServiceList is a list of GitService resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitService'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitServiceSpec:
    description: GitServiceSpec is the specification of an GitService
    properties:
      gitKind:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitStatus:
    description: GitStatus the status of a git commit in terms of CI/CD
    properties:
      status:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GlobalProtectionPolicy:
    description: GlobalProtectionPolicy defines the default branch protection policy
      for the scheduler
    properties:
      ProtectionPolicy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ProtectionPolicy'
      protectTested:
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.IssueLabel:
    properties:
      color:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.IssueSummary:
    description: IssueSummary is the summary of an issue
    properties:
      assignees:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
        type: array
      body:
        type: string
      closedBy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
      creationTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      id:
        type: string
      labels:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.IssueLabel'
        type: array
      message:
        type: string
      state:
        type: string
      title:
        type: string
      url:
        type: string
      user:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.JobBase:
    description: JobBase contains attributes common to all job types
    properties:
      agent:
        description: Agent that will take care of running this job.
        type: string
      cluster:
        description: 'Cluster is the alias of the cluster to run this job in. (Default:
          kube.DefaultClusterAlias)'
        type: string
      labels:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableMapOfStringString'
        description: ReplaceableMapOfStringString are added to jobs and pods created
          for this job.
      maxConcurrency:
        description: MaximumConcurrency of this job, 0 implies no limit.
        format: int32
        type: integer
      name:
        description: The name of the job. Must match regex [A-Za-z0-9-._]+ e.g. pull-test-infra-bazel-build
        type: string
      namespace:
        description: |-
          Namespace is the namespace in which pods schedule.
            empty: results in scheduler.DefaultNamespace
        type: string
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec'
        description: Spec is the Kubernetes pod spec used if Agent is kubernetes.
    required:
    - name
    - agent
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Lgtm:
    description: Lgtm specifies a configuration for a single lgtm. The configuration
      for the lgtm plugin is defined as a list of these structures.
    properties:
      reviewActsAsLgtm:
        description: ReviewActsAsLgtm indicates that a Github review of "approve"
          or "request changes" acts as adding or removing the lgtm label
        type: boolean
      storeTreeHash:
        description: StoreTreeHash indicates if tree_hash should be stored inside
          a comment to detect squashed commits before removing lgtm labels
        type: boolean
      trustedTeamForStickyLgtm:
        description: |-
          WARNING: This disables the security mechanism that prevents a malicious member (or compromised GitHub account) from merging arbitrary code. Use with caution.

          StickyLgtmTeam specifies the Github team whose members are trusted with sticky LGTM, which eliminates the need to re-lgtm minor fixes/updates.
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Measurement:
    description: Measurement is a percentage or a count, something measured that the
      system will capture within a fact
    properties:
      measurementType:
        type: string
      measurementValue:
        format: int32
        type: integer
      name:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - measurementType
    - measurementValue
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Merger:
    description: Merger defines the options used to merge the PR
    properties:
      blockerLabel:
        description: BlockerLabel is an optional label that is used to identify merge
          blocking Git Provider issues. Leave this blank to disable this feature and
          save 1 API token per sync loop.
        type: string
      maxGoroutines:
        description: MaxGoroutines is the maximum number of goroutines spawned inside
          the controller to handle org/repo:branch pools. Defaults to 20. Needs to
          be a positive number.
        format: int32
        type: integer
      mergeMethod:
        description: Override the default method of merge. Valid options are squash,
          rebase, and merge.
        type: string
      policy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ContextPolicy'
        description: ContextOptions defines the default merge options. If not set
          it will infer the required and optional contexts from the jobs configured
          and use the Git Provider combined status; otherwise it may apply the branch
          protection setting or let user define their own options in case branch protection
          is not used.
      prStatusBaseUrl:
        description: PRStatusBaseURL is the base URL for the PR status page. This
          is used to link to a merge requirements overview in the status context.
        type: string
      squashLabel:
        description: SquashLabel is an optional label that is used to identify PRs
          that should always be squash merged. Leave this blank to disable this feature.
        type: string
      targetUrl:
        description: URL for status contexts.
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Original:
    description: Original contains the report
    properties:
      mimetype:
        type: string
      tags:
        items:
          type: string
        type: array
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Periodic:
    description: Periodic defines a job to be run periodically
    properties:
      JobBase:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.JobBase'
      cron:
        description: Cron representation of job trigger time
        type: string
      interval:
        description: Interval to wait between two runs of the job.
        type: string
      tags:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
        description: Tags for config entries
    required:
    - interval
    - cron
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Periodics:
    description: Periodics is a list of jobs to be run periodically
    properties:
      entries:
        description: Items are the post submit configurations
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Periodic'
        type: array
      replace:
        description: Replace the existing entries
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivity:
    description: PipelineActivity represents pipeline activity for a particular run
      of a pipeline
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivitySpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivityStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivityList:
    description: PipelineActivityList is a list of PipelineActivity resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivity'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivitySpec:
    description: PipelineActivitySpec is the specification of the pipeline activity
    properties:
      attachments:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Attachment'
        type: array
      author:
        type: string
      authorAvatarURL:
        type: string
      authorURL:
        type: string
      baseSHA:
        type: string
      batchPipelineActivity:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BatchPipelineActivity'
      build:
        type: string
      buildLogsUrl:
        type: string
      buildUrl:
        type: string
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      context:
        type: string
      gitBranch:
        type: string
      gitOwner:
        type: string
      gitRepository:
        type: string
      gitUrl:
        type: string
      lastCommitMessage:
        type: string
      lastCommitSHA:
        type: string
      lastCommitURL:
        type: string
      pipeline:
        type: string
      postExtensions:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExtensionExecution'
        type: array
      pullTitle:
        type: string
      releaseNotesURL:
        type: string
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
      steps:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivityStep'
        type: array
      version:
        type: string
      workflow:
        description: Deprecated - Workflow functionality was removed and is obsolete
          Keeping these fields to ensure backwards compatibility Should be removed
          when we increment spec version
        type: string
      workflowMessage:
        type: string
      workflowStatus:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivityStatus:
    description: PipelineActivityStatus is the status for an Environment resource
    properties:
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineActivityStep:
    description: PipelineActivityStep represents a step in a pipeline activity
    properties:
      kind:
        type: string
      preview:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PreviewActivityStep'
      promote:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromoteActivityStep'
      stage:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.StageActivityStep'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineExtension:
    description: PipelineExtension defines the image and command of an app which wants
      to modify/extend the pipeline
    properties:
      args:
        description: Arguments to the entrypoint.
        items:
          type: string
        type: array
      command:
        description: Entrypoint array. Not executed within a shell.
        type: string
      image:
        description: Docker image name.
        type: string
      name:
        description: Name of the container specified as a DNS_LABEL.
        type: string
    required:
    - name
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineStructure:
    description: PipelineStructure contains references to the Pipeline and PipelineRun,
      and a list of PipelineStructureStages in the pipeline. This allows us to map
      between a running Pod to its TaskRun, to the TaskRun's Task and PipelineRun,
      and finally from there to the stage and potential parent stages that the Pod
      is actually executing, for use with populating PipelineActivity and providing
      logs.
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      pipelineRef:
        type: string
      pipelineRunRef:
        type: string
      stages:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineStructureStage'
        type: array
    required:
    - pipelineRef
    - pipelineRunRef
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineStructureList:
    description: PipelineStructureList is a list of PipelineStructureList resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineStructure'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PipelineStructureStage:
    description: PipelineStructureStage contains the stage's name, one of either a
      reference to the Task corresponding to the stage if it has steps, a list of
      sequential stage names nested within this stage, or a list of parallel stage
      names nested within this stage, and information on this stage's depth within
      the PipelineStructure as a whole, the name of its parent stage, if any, the
      name of the stage before it in execution order, if any, and the name of the
      stage after it in execution order, if any.
    properties:
      depth:
        format: byte
        type: integer
      name:
        type: string
      next:
        type: string
      parallel:
        items:
          type: string
        type: array
      parent:
        type: string
      previous:
        type: string
      stages:
        items:
          type: string
        type: array
      taskRef:
        description: Must have one of TaskRef+TaskRunRef, Stages, or Parallel
        type: string
      taskRunRef:
        description: Populated during pod discovery, not at initial creation time.
        type: string
    required:
    - name
    - depth
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Plugin:
    description: Plugin represents a binary plugin installed into this Jenkins X team
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PluginSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PluginList:
    description: PluginList is a list of Plugins available for a team
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Plugin'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PluginSpec:
    description: PluginSpec provides details of a binary plugin available for a team
    properties:
      binaries:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Binary'
        type: array
      description:
        type: string
      group:
        type: string
      name:
        type: string
      subCommand:
        type: string
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Postsubmit:
    description: Postsubmit runs on push events.
    properties:
      Brancher:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Brancher'
      JobBase:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.JobBase'
      RegexpChangeMatcher:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.RegexpChangeMatcher'
      context:
        description: Context is the name of the GitHub status context for the job.
        type: string
      report:
        description: Report will comment and set status on GitHub.
        type: boolean
    required:
    - context
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Postsubmits:
    description: Postsubmits is a list of Postsubmit job configurations that can optionally
      completely replace the Postsubmit job configurations in the parent scheduler
    properties:
      entries:
        description: Items are the post submit configurations
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Postsubmit'
        type: array
      replace:
        description: Replace the existing entries
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Presubmit:
    description: Presubmit defines a job configuration for pull requests
    properties:
      Brancher:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Brancher'
      JobBase:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.JobBase'
      RegexpChangeMatcher:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.RegexpChangeMatcher'
      alwaysRun:
        description: AlwaysRun automatically for every PR, or only when a comment
          triggers it. By default true.
        type: boolean
      context:
        description: Context is the name of the Git Provider status context for the
          job.
        type: string
      context_options:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.RepoContextPolicy'
        description: ContextOptions defines the merge options. If not set it will
          infer the required and optional contexts from the jobs configured and use
          the Git Provider combined status; otherwise it may apply the branch protection
          setting or let user define their own options in case branch protection is
          not used.
      mergeMethod:
        description: Override the default method of merge. Valid options are squash,
          rebase, and merge.
        type: string
      optional:
        description: Optional indicates that the job's status context should not be
          required for merge. By default false.
        type: boolean
      policy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ProtectionPolicies'
      queries:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Query'
        type: array
      report:
        description: Report enables reporting the job status on the git provider
        type: boolean
      rerunCommand:
        description: 'The RerunCommand to give users. Must match Trigger. Trigger
          must also be specified if this field is specified. (Default: `/test <job
          name>`)'
        type: string
      trigger:
        description: 'Trigger is the regular expression to trigger the job. e.g. `@k8s-bot
          e2e test this` RerunCommand must also be specified if this field is specified.
          (Default: `(?m)^/test (?:.*? )?<job name>(?: .*?)?$`)'
        type: string
    required:
    - alwaysRun
    - context
    - trigger
    - rerunCommand
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Presubmits:
    description: Presubmits is a list of Presubmit job configurations that can optionally
      completely replace the Presubmit job configurations in the parent scheduler
    properties:
      entries:
        description: Items are the Presubmit configurtations
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Presubmit'
        type: array
      replace:
        description: Replace the existing entries
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PreviewActivityStep:
    description: PreviewActivityStep is the step of creating a preview environment
      as part of a Pull Request pipeline
    properties:
      applicationURL:
        type: string
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description:
        type: string
      environment:
        type: string
      name:
        type: string
      pullRequestURL:
        type: string
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PreviewGitSpec:
    description: PreviewGitSpec is the preview git branch/pull request details
    properties:
      appName:
        type: string
      applicationURL:
        type: string
      buildStatus:
        type: string
      buildStatusUrl:
        type: string
      description:
        type: string
      name:
        type: string
      title:
        type: string
      url:
        type: string
      user:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromoteActivityStep:
    description: PromoteActivityStep is the step of promoting a version of an application
      to an environment
    properties:
      applicationURL:
        type: string
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description:
        type: string
      environment:
        type: string
      name:
        type: string
      pullRequest:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromotePullRequestStep'
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
      update:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromoteUpdateStep'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromotePullRequestStep:
    description: PromotePullRequestStep is the step for promoting a version to an
      environment by raising a Pull Request on the git repository of the environment
    properties:
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description:
        type: string
      mergeCommitSHA:
        type: string
      name:
        type: string
      pullRequestURL:
        type: string
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromoteUpdateStep:
    description: PromoteUpdateStep is the step for updating a promotion after the
      Pull Request merges to master
    properties:
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description:
        type: string
      name:
        type: string
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
      statuses:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GitStatus'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromoteWorkflowStep:
    description: PromoteWorkflowStep is the step of promoting a version of an application
      to an environment
    properties:
      environment:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ProtectionPolicies:
    description: ProtectionPolicies defines the branch protection policies
    properties:
      ProtectionPolicy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ProtectionPolicy'
      Replace:
        type: boolean
      entries:
        additionalProperties:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ProtectionPolicy'
        type: object
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ProtectionPolicy:
    description: ProtectionPolicy for merging.
    properties:
      enforceAdmins:
        description: Admins overrides whether protections apply to admins if set.
        type: boolean
      protect:
        description: Protect overrides whether branch protection is enabled if set.
        type: boolean
      requiredPullRequestReviews:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReviewPolicy'
        description: RequiredPullRequestReviews specifies approval/review criteria.
      requiredStatusChecks:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.BranchProtectionContextPolicy'
        description: RequiredStatusChecks configures github contexts
      restrictions:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Restrictions'
        description: Restrictions limits who can merge
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PullRequestInfo:
    description: PullRequestInfo contains information about a PR included in a batch,
      like its PR number, the last build number, and SHA
    properties:
      lastBuildNumberForCommit:
        description: LastBuildNumberForCommit is the number of the last successful
          build of this PR outside of a batch
        type: string
      lastBuildSHA:
        description: LastBuildSHA is the commit SHA in the last successful build of
          this PR outside of a batch.
        type: string
      pullRequestNumber:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Query:
    description: 'Query is turned into a Git Provider search query. See the docs for
      details: https://help.github.com/articles/searching-issues-and-pull-requests/'
    properties:
      excludedBranches:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      includedBranches:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      labels:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      milestone:
        type: string
      missingLabels:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      reviewApprovedRequired:
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.QuickStartLocation:
    description: QuickStartLocation
    properties:
      excludes:
        items:
          type: string
        type: array
      gitKind:
        type: string
      gitUrl:
        type: string
      includes:
        items:
          type: string
        type: array
      owner:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.RegexpChangeMatcher:
    description: RegexpChangeMatcher is for code shared between jobs that run only
      when certain files are changed.
    properties:
      runIfChanged:
        description: RunIfChanged defines a regex used to select which subset of file
          changes should trigger this job. If any file in the changeset matches this
          regex, the job will be triggered
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Release:
    description: Release represents a single version of an app that has been released
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReleaseSpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReleaseStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReleaseList:
    description: ReleaseList is a list of Release resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Release'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReleaseSpec:
    description: ReleaseSpec is the specification of the Release
    properties:
      commits:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CommitSummary'
        type: array
      dependencyUpdates:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.DependencyUpdate'
        type: array
      gitCloneUrl:
        type: string
      gitHttpUrl:
        type: string
      gitOwner:
        type: string
      gitRepository:
        type: string
      issues:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.IssueSummary'
        type: array
      name:
        type: string
      pullRequests:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.IssueSummary'
        type: array
      releaseNotesURL:
        type: string
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReleaseStatus:
    description: ReleaseStatus is the status of a release
    properties:
      status:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableMapOfStringContextPolicy:
    description: ReplaceableMapOfStringContextPolicy is a map of context policies
      that can optionally completely replace any context policies defined in the parent
      scheduler
    properties:
      Items:
        additionalProperties:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ContextPolicy'
        type: object
      replace:
        type: boolean
    required:
    - Items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableMapOfStringString:
    description: ReplaceableMapOfStringString is a map of strings that can optionally
      completely replace the map of strings in the parent scheduler
    properties:
      entries:
        additionalProperties:
          type: string
        type: object
      replace:
        description: Replace the existing entries
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfExternalPlugins:
    description: ReplaceableSliceOfExternalPlugins is a list of external plugins that
      can optionally completely replace the plugins in any parent SchedulerSpec
    properties:
      Replace:
        type: boolean
      entries:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ExternalPlugin'
        type: array
    required:
    - Replace
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings:
    description: ReplaceableSliceOfStrings is a slice of strings that can optionally
      completely replace the slice of strings defined in the parent scheduler
    properties:
      entries:
        description: Items is the string values
        items:
          type: string
        type: array
      replace:
        description: Replace the existing entries
        type: boolean
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.RepoContextPolicy:
    description: RepoContextPolicy overrides the policy for repo, and any branch overrides.
    properties:
      ContextPolicy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ContextPolicy'
      branches:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableMapOfStringContextPolicy'
    required:
    - ContextPolicy
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference:
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      kind:
        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
        type: string
      name:
        description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        type: string
      uid:
        description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
        type: string
    required:
    - kind
    - name
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Restrictions:
    description: Restrictions limits who can merge Users and Teams entries are appended
      to parent lists.
    properties:
      teams:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
      users:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
    required:
    - users
    - teams
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReviewPolicy:
    description: ReviewPolicy specifies git provider approval/review criteria. Any
      nil values inherit the policy from the parent, otherwise bool/ints are overridden.
      Non-empty lists are appended to parent lists.
    properties:
      dismissStaleReviews:
        description: DismissStale overrides whether new commits automatically dismiss
          old reviews if set
        type: boolean
      dismissalRestrictions:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Restrictions'
        description: Restrictions appends users/teams that are allowed to merge
      requireCodeOwnerReviews:
        description: RequireOwners overrides whether CODEOWNERS must approve PRs if
          set
        type: boolean
      requiredApprovingReviewCount:
        description: Approvals overrides the number of approvals required if set (set
          to 0 to disable)
        format: int32
        type: integer
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Scheduler:
    description: Scheduler is configuration for a pipeline scheduler
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SchedulerSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SchedulerAgent:
    description: SchedulerAgent defines the scheduler agent configuration
    properties:
      agent:
        description: Agent defines the agent used to schedule jobs, by default Prow
        type: string
    required:
    - agent
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SchedulerList:
    description: SchedulerList is a list of configurations for a pipeline scheduler
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Scheduler'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SchedulerSpec:
    description: SchedulerSpec defines the pipeline scheduler (e.g. Prow) configuration
    properties:
      approve:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Approve'
      attachments:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Attachment'
        type: array
      configUpdater:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ConfigUpdater'
      externalPlugins:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfExternalPlugins'
      lgtm:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Lgtm'
      merger:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Merger'
      periodics:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Periodics'
      plugins:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ReplaceableSliceOfStrings'
        description: Plugins is a list of plugin names enabled for a repo
      policy:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.GlobalProtectionPolicy'
      postsubmits:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Postsubmits'
      presubmits:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Presubmits'
      schedulerAgent:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SchedulerAgent'
      trigger:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Trigger'
      welcome:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Welcome'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepository:
    description: SourceRepository is the metadata for an Application/Project/SourceRepository
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositorySpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositoryGroup:
    description: SourceRepositoryGroup is the metadata for an Application/Project/SourceRepository
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositoryGroupSpec'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositoryGroupList:
    description: SourceRepositoryGroupList is a structure used by k8s to store lists
      of apps
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositoryGroup'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositoryGroupSpec:
    description: SourceRepositoryGroupSpec is the metadata for an Application/Project/SourceRepository
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      repositories:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference'
        type: array
      scheduler:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference'
    required:
    - repositories
    - scheduler
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositoryList:
    description: SourceRepositoryList is a structure used by k8s to store lists of
      apps
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepository'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.SourceRepositorySpec:
    description: SourceRepositorySpec provides details of the metadata for an App
    properties:
      description:
        type: string
      httpCloneURL:
        description: HTTPCloneURL is the git URL to clone this repository using HTTP/HTTPS
        type: string
      org:
        type: string
      provider:
        description: Provider stores the URL of the git provider such as https://github.com
        type: string
      providerKind:
        description: ProviderKind is the kind of provider (github / bitbucketcloud
          / bitbucketserver etc)
        type: string
      providerName:
        description: ProviderName is a logical name for the provider without any URL
          scheme which can be used in a label selector
        type: string
      repo:
        type: string
      scheduler:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference'
        description: Scheduler a reference to a custom scheduler otherwise we default
          to the Team's Scededuler
      sshCloneURL:
        description: SSHCloneURL is the git URL to clone this repository using SSH
        type: string
      url:
        description: URL is the web URL of the project page
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.StageActivityStep:
    description: StageActivityStep represents a stage of zero to more sub steps in
      a jenkins pipeline
    properties:
      completedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      description:
        type: string
      name:
        type: string
      startedTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      status:
        type: string
      steps:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.CoreActivityStep'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Statement:
    description: Statement represents a decision that was made, for example that a
      promotion was approved or denied
    properties:
      measurementValue:
        type: boolean
      name:
        type: string
      statementType:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - name
    - statementType
    - measurementValue
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.StorageLocation:
    description: StorageLocation
    properties:
      bucketUrl:
        type: string
      classifier:
        type: string
      gitBranch:
        type: string
      gitUrl:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Team:
    description: Team represents a request to create an actual Team which is a group
      of users, a development environment and optional other environments
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamSpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamList:
    description: TeamList is a list of TypeMeta resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Team'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamSettings:
    description: TeamSettings the default settings for a team
    properties:
      appPrefixes:
        description: AppsPrefixes is the list of prefixes for appNames
        items:
          type: string
        type: array
      appsRepository:
        type: string
      askOnCreate:
        type: boolean
      bootRequirements:
        description: BootRequirements is a marshaled string of the jx-requirements.yml
          used in the most recent run for this cluster
        type: string
      branchPatterns:
        type: string
      buildPackName:
        type: string
      buildPackRef:
        type: string
      buildPackUrl:
        type: string
      defaultScheduler:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.ResourceReference'
      deployKind:
        description: DeployKind what kind of deployment ("default" uses regular Kubernetes
          Services and Deployments, "knative" uses the Knative Service resource instead)
        type: string
      deployOptions:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.DeployOptions'
        description: DeployOptions configures options for how to deploy applications
          by default such as using canary rollouts (progressive delivery) or using
          horizontal pod autoscaler
      dockerRegistryOrg:
        type: string
      envOrganisation:
        type: string
      forkBranchPatterns:
        type: string
      gitPublic:
        type: boolean
      gitServer:
        type: string
      helmBinary:
        type: string
      helmTemplate:
        type: boolean
      importMode:
        description: ImportMode indicates what kind of
        type: string
      kubeProvider:
        type: string
      noTiller:
        type: boolean
      organisation:
        type: string
      pipelineUserEmail:
        type: string
      pipelineUsername:
        type: string
      postPreviewJobs:
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.Job'
        type: array
      profile:
        description: Profile is the profile in use (see jx profile)
        type: string
      promotionEngine:
        type: string
      prowConfig:
        description: ProwConfig is the way we manage prow configurations
        type: string
      prowEngine:
        description: ProwEngine is the kind of prow engine used such as knative build
          or build pipeline
        type: string
      quickstartLocations:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.QuickStartLocation'
        type: array
      storageLocations:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.StorageLocation'
        type: array
      useGitOps:
        type: boolean
      versionStreamRef:
        description: VersionStreamRef contains the git ref (tag or branch) in the
          VersionStreamURL repository to use as the version stream
        type: string
      versionStreamUrl:
        description: VersionStreamURL contains the git clone URL for the Version Stream
          which is the set of versions to use for charts, images, packages etc
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamSpec:
    description: TeamSpec is the specification of an Team
    properties:
      kind:
        type: string
      label:
        type: string
      members:
        items:
          type: string
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.TeamStatus:
    description: TeamStatus is the status for an Team resource
    properties:
      message:
        type: string
      provisionStatus:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Trigger:
    description: |-
      Trigger specifies a configuration for a single trigger.

      The configuration for the trigger plugin is defined as a list of these structures.
    properties:
      ignoreOkToTest:
        description: IgnoreOkToTest makes trigger ignore /ok-to-test comments. This
          is a security mitigation to only allow testing from trusted users.
        type: boolean
      joinOrgUrl:
        description: JoinOrgURL is a link that redirects users to a location where
          they should be able to read more about joining the organization in order
          to become trusted members. Defaults to the Github link of TrustedOrg.
        type: string
      onlyOrgMembers:
        description: OnlyOrgMembers requires PRs and/or /ok-to-test comments to come
          from org members. By default, trigger also include repo collaborators.
        type: boolean
      trustedOrg:
        description: TrustedOrg is the org whose members' PRs will be automatically
          built for PRs to the above repos. The default is the PR's org.
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.User:
    description: User represents a git user so we have a cache to find by email address
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
      user:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails'
        description: Deprecated, use Spec
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserDetails:
    description: UserDetails containers details of a user
    properties:
      accountReference:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.AccountReference'
        type: array
      avatarUrl:
        type: string
      creationTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      email:
        type: string
      externalUser:
        type: boolean
      login:
        type: string
      name:
        type: string
      serviceAccount:
        type: string
      url:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserList:
    description: UserList is a list of User resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.User'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.UserSpec:
    description: UserSpec is the user details
    properties:
      imageUrl:
        type: string
      linkUrl:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Welcome:
    description: Welcome welcome plugin config
    properties:
      message_template:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Workflow:
    description: Workflow represents pipeline activity for a particular run of a pipeline
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowSpec'
      status:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowStatus'
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowList:
    description: WorkflowList is a list of Workflow resources
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      items:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.Workflow'
        type: array
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
    required:
    - metadata
    - items
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowPreconditions:
    description: WorkflowPreconditions is the trigger to start a step
    properties:
      environments:
        description: the names of the environments which need to have promoted before
          this step can be triggered
        items:
          type: string
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowSpec:
    description: WorkflowSpec is the specification of the pipeline activity
    properties:
      pipeline:
        type: string
      steps:
        items:
          $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowStep'
        type: array
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowStatus:
    description: WorkflowStatus is the status for an Environment resource
    properties:
      version:
        type: string
    type: object
  com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowStep:
    description: WorkflowStep represents a step in a pipeline activity
    properties:
      description:
        type: string
      kind:
        type: string
      name:
        type: string
      promote:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.PromoteWorkflowStep'
      trigger:
        $ref: '#/definitions/com.github.jenkins-x.jx-api.pkg.apis.jenkins_io.v1.WorkflowPreconditions'
    type: object
  io.k8s.api.batch.v1.Job:
    description: Job represents the configuration of a single job.
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobSpec'
        description: 'Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      status:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobStatus'
        description: 'Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
    type: object
  io.k8s.api.batch.v1.JobCondition:
    description: JobCondition describes current state of a job.
    properties:
      lastProbeTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition was checked.
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transit from one status to another.
      message:
        description: Human readable message indicating details about last transition.
        type: string
      reason:
        description: (brief) reason for the condition's last transition.
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        type: string
      type:
        description: Type of job condition, Complete or Failed.
        type: string
    required:
    - type
    - status
    type: object
  io.k8s.api.batch.v1.JobSpec:
    description: JobSpec describes how the job execution will look like.
    properties:
      activeDeadlineSeconds:
        description: Specifies the duration in seconds relative to the startTime that
          the job may be active before the system tries to terminate it; value must
          be positive integer
        format: int64
        type: integer
      backoffLimit:
        description: Specifies the number of retries before marking this job failed.
          Defaults to 6
        format: int32
        type: integer
      completions:
        description: 'Specifies the desired number of successfully finished pods the
          job should be run with.  Setting to nil means that the success of any pod
          signals the success of all pods, and allows parallelism to have any positive
          value.  Setting to 1 means that parallelism is limited to 1 and the success
          of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/'
        format: int32
        type: integer
      manualSelector:
        description: 'manualSelector controls generation of pod labels and pod selectors.
          Leave `manualSelector` unset unless you are certain what you are doing.
          When false or unset, the system pick labels unique to this job and appends
          those labels to the pod template.  When true, the user is responsible for
          picking unique labels and specifying the selector.  Failure to pick a unique
          label may cause this and other jobs to not function correctly.  However,
          You may see `manualSelector=true` in jobs that were created with the old
          `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector'
        type: boolean
      parallelism:
        description: 'Specifies the maximum desired number of pods the job should
          run at any given time. The actual number of pods running in steady state
          will be less than this number when ((.spec.completions - .status.successful)
          < .spec.parallelism), i.e. when the work left to do is less than max parallelism.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/'
        format: int32
        type: integer
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: 'A label query over pods that should match the pod count. Normally,
          the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec'
        description: 'Describes the pod that will be created when executing a job.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/'
      ttlSecondsAfterFinished:
        description: ttlSecondsAfterFinished limits the lifetime of a Job that has
          finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished
          after the Job finishes, it is eligible to be automatically deleted. When
          the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will
          be honored. If this field is unset, the Job won't be automatically deleted.
          If this field is set to zero, the Job becomes eligible to be deleted immediately
          after it finishes. This field is alpha-level and is only honored by servers
          that enable the TTLAfterFinished feature.
        format: int32
        type: integer
    required:
    - template
    type: object
  io.k8s.api.batch.v1.JobStatus:
    description: JobStatus represents the current state of a Job.
    properties:
      active:
        description: The number of actively running pods.
        format: int32
        type: integer
      completionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Represents time when the job was completed. It is not guaranteed
          to be set in happens-before order across separate operations. It is represented
          in RFC3339 form and is in UTC.
      conditions:
        description: 'The latest available observations of an object''s current state.
          More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/'
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.JobCondition'
        type: array
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      failed:
        description: The number of pods which reached phase Failed.
        format: int32
        type: integer
      startTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Represents time when the job was acknowledged by the job controller.
          It is not guaranteed to be set in happens-before order across separate operations.
          It is represented in RFC3339 form and is in UTC.
      succeeded:
        description: The number of pods which reached phase Succeeded.
        format: int32
        type: integer
    type: object
  io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource:
    description: |-
      Represents a Persistent Disk resource in AWS.

      An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure
          that the filesystem type is supported by the host operating system. Examples:
          "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        type: string
      partition:
        description: 'The partition in the volume that you want to mount. If omitted,
          the default is to mount by volume name. Examples: For volume /dev/sda1,
          you specify the partition as "1". Similarly, the volume partition for /dev/sda
          is "0" (or you can leave the property empty).'
        format: int32
        type: integer
      readOnly:
        description: 'Specify "true" to force and set the ReadOnly property in VolumeMounts
          to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        type: boolean
      volumeID:
        description: 'Unique ID of the persistent disk resource in AWS (Amazon EBS
          volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        type: string
    required:
    - volumeID
    type: object
  io.k8s.api.core.v1.Affinity:
    description: Affinity is a group of affinity scheduling rules.
    properties:
      nodeAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeAffinity'
        description: Describes node affinity scheduling rules for the pod.
      podAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAffinity'
        description: Describes pod affinity scheduling rules (e.g. co-locate this
          pod in the same node, zone, etc. as some other pod(s)).
      podAntiAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAntiAffinity'
        description: Describes pod anti-affinity scheduling rules (e.g. avoid putting
          this pod in the same node, zone, etc. as some other pod(s)).
    type: object
  io.k8s.api.core.v1.AzureDiskVolumeSource:
    description: AzureDisk represents an Azure Data Disk mount on the host and bind
      mount to the pod.
    properties:
      cachingMode:
        description: 'Host Caching mode: None, Read Only, Read Write.'
        type: string
      diskName:
        description: The Name of the data disk in the blob storage
        type: string
      diskURI:
        description: The URI the data disk in the blob storage
        type: string
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        type: string
      kind:
        description: 'Expected values Shared: multiple blob disks per storage account  Dedicated:
          single blob disk per storage account  Managed: azure managed data disk (only
          in managed availability set). defaults to shared'
        type: string
      readOnly:
        description: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        type: boolean
    required:
    - diskName
    - diskURI
    type: object
  io.k8s.api.core.v1.AzureFileVolumeSource:
    description: AzureFile represents an Azure File Service mount on the host and
      bind mount to the pod.
    properties:
      readOnly:
        description: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        type: boolean
      secretName:
        description: the name of secret that contains Azure Storage Account Name and
          Key
        type: string
      shareName:
        description: Share Name
        type: string
    required:
    - secretName
    - shareName
    type: object
  io.k8s.api.core.v1.CSIVolumeSource:
    description: Represents a source location of a volume to mount, managed by an
      external CSI driver
    properties:
      driver:
        description: Driver is the name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
        type: string
      fsType:
        description: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided,
          the empty value is passed to the associated CSI driver which will determine
          the default filesystem to apply.
        type: string
      nodePublishSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: NodePublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume
          and NodeUnpublishVolume calls. This field is optional, and  may be empty
          if no secret is required. If the secret object contains more than one secret,
          all secret references are passed.
      readOnly:
        description: Specifies a read-only configuration for the volume. Defaults
          to false (read/write).
        type: boolean
      volumeAttributes:
        additionalProperties:
          type: string
        description: VolumeAttributes stores driver-specific properties that are passed
          to the CSI driver. Consult your driver's documentation for supported values.
        type: object
    required:
    - driver
    type: object
  io.k8s.api.core.v1.Capabilities:
    description: Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        description: Added capabilities
        items:
          type: string
        type: array
      drop:
        description: Removed capabilities
        items:
          type: string
        type: array
    type: object
  io.k8s.api.core.v1.CephFSVolumeSource:
    description: Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: 'Required: Monitors is a collection of Ceph monitors More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        items:
          type: string
        type: array
      path:
        description: 'Optional: Used as the mounted root, rather than the full Ceph
          tree, default is /'
        type: string
      readOnly:
        description: 'Optional: Defaults to false (read/write). ReadOnly here will
          force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        type: boolean
      secretFile:
        description: 'Optional: SecretFile is the path to key ring for User, default
          is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        type: string
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: 'Optional: SecretRef is reference to the authentication secret
          for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
      user:
        description: 'Optional: User is the rados user name, default is admin More
          info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it'
        type: string
    required:
    - monitors
    type: object
  io.k8s.api.core.v1.CinderVolumeSource:
    description: Represents a cinder volume resource in Openstack. A Cinder volume
      must exist before mounting to a container. The volume must also be in the same
      region as the kubelet. Cinder volumes support ownership management and SELinux
      relabeling.
    properties:
      fsType:
        description: 'Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly
          inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        type: string
      readOnly:
        description: 'Optional: Defaults to false (read/write). ReadOnly here will
          force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
        type: boolean
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: 'Optional: points to a secret object containing parameters used
          to connect to OpenStack.'
      volumeID:
        description: 'volume id used to identify the volume in cinder. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md'
        type: string
    required:
    - volumeID
    type: object
  io.k8s.api.core.v1.ConfigMapEnvSource:
    description: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

      The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
    properties:
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the ConfigMap must be defined
        type: boolean
    type: object
  io.k8s.api.core.v1.ConfigMapKeySelector:
    description: Selects a key from a ConfigMap.
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the ConfigMap or its key must be defined
        type: boolean
    required:
    - key
    type: object
  io.k8s.api.core.v1.ConfigMapProjection:
    description: |-
      Adapts a ConfigMap into a projected volume.

      The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
    properties:
      items:
        description: If unspecified, each key-value pair in the Data field of the
          referenced ConfigMap will be projected into the volume as a file whose name
          is the key and content is the value. If specified, the listed keys will
          be projected into the specified paths, and unlisted keys will not be present.
          If a key is specified which is not present in the ConfigMap, the volume
          setup will error unless it is marked optional. Paths must be relative and
          may not contain the '..' path or start with '..'.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the ConfigMap or its keys must be defined
        type: boolean
    type: object
  io.k8s.api.core.v1.ConfigMapVolumeSource:
    description: |-
      Adapts a ConfigMap into a volume.

      The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: 'Optional: mode bits to use on created files by default. Must
          be a value between 0 and 0777. Defaults to 0644. Directories within the
          path are not affected by this setting. This might be in conflict with other
          options that affect the file mode, like fsGroup, and the result can be other
          mode bits set.'
        format: int32
        type: integer
      items:
        description: If unspecified, each key-value pair in the Data field of the
          referenced ConfigMap will be projected into the volume as a file whose name
          is the key and content is the value. If specified, the listed keys will
          be projected into the specified paths, and unlisted keys will not be present.
          If a key is specified which is not present in the ConfigMap, the volume
          setup will error unless it is marked optional. Paths must be relative and
          may not contain the '..' path or start with '..'.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the ConfigMap or its keys must be defined
        type: boolean
    type: object
  io.k8s.api.core.v1.Container:
    description: A single application container that you want to run within a pod.
    properties:
      args:
        description: 'Arguments to the entrypoint. The docker image''s CMD is used
          if this is not provided. Variable references $(VAR_NAME) are expanded using
          the container''s environment. If a variable cannot be resolved, the reference
          in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped
          with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not. Cannot be updated. More
          info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        items:
          type: string
        type: array
      command:
        description: 'Entrypoint array. Not executed within a shell. The docker image''s
          ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)
          are expanded using the container''s environment. If a variable cannot be
          resolved, the reference in the input string will be unchanged. The $(VAR_NAME)
          syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references
          will never be expanded, regardless of whether the variable exists or not.
          Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        items:
          type: string
        type: array
      env:
        description: List of environment variables to set in the container. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvVar'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      envFrom:
        description: List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key
          exists in multiple sources, the value associated with the last source will
          take precedence. Values defined by an Env with a duplicate key will take
          precedence. Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvFromSource'
        type: array
      image:
        description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default
          or override container images in workload controllers like Deployments and
          StatefulSets.'
        type: string
      imagePullPolicy:
        description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults
          to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
          be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        type: string
      lifecycle:
        $ref: '#/definitions/io.k8s.api.core.v1.Lifecycle'
        description: Actions that the management system should take in response to
          container lifecycle events. Cannot be updated.
      livenessProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: 'Periodic probe of container liveness. Container will be restarted
          if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
      name:
        description: Name of the container specified as a DNS_LABEL. Each container
          in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        type: string
      ports:
        description: List of ports to expose from the container. Exposing a port here
          gives the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is listening
          on the default "0.0.0.0" address inside a container will be accessible from
          the network. Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerPort'
        type: array
        x-kubernetes-list-map-keys:
        - containerPort
        - protocol
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: containerPort
        x-kubernetes-patch-strategy: merge
      readinessProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: 'Periodic probe of container service readiness. Container will
          be removed from service endpoints if the probe fails. Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
      resources:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceRequirements'
        description: 'Compute Resources required by this container. Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.SecurityContext'
        description: 'Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
      startupProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: 'StartupProbe indicates that the Pod has successfully initialized.
          If specified, no other probes are executed until this completes successfully.
          If this probe fails, the Pod will be restarted, just as if the livenessProbe
          failed. This can be used to provide different probe parameters at the beginning
          of a Pod''s lifecycle, when it might take a long time to load data or warm
          a cache, than during steady-state operation. This cannot be updated. This
          is an alpha feature enabled by the StartupProbe feature flag. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
      stdin:
        description: Whether this container should allocate a buffer for stdin in
          the container runtime. If this is not set, reads from stdin in the container
          will always result in EOF. Default is false.
        type: boolean
      stdinOnce:
        description: Whether the container runtime should close the stdin channel
          after it has been opened by a single attach. When stdin is true the stdin
          stream will remain open across multiple attach sessions. If stdinOnce is
          set to true, stdin is opened on container start, is empty until the first
          client attaches to stdin, and then remains open and accepts data until the
          client disconnects, at which time stdin is closed and remains closed until
          the container is restarted. If this flag is false, a container processes
          that reads from stdin will never receive an EOF. Default is false
        type: boolean
      terminationMessagePath:
        description: 'Optional: Path at which the file to which the container''s termination
          message will be written is mounted into the container''s filesystem. Message
          written is intended to be brief final status, such as an assertion failure
          message. Will be truncated by the node if greater than 4096 bytes. The total
          message length across all containers will be limited to 12kb. Defaults to
          /dev/termination-log. Cannot be updated.'
        type: string
      terminationMessagePolicy:
        description: Indicate how the termination message should be populated. File
          will use the contents of terminationMessagePath to populate the container
          status message on both success and failure. FallbackToLogsOnError will use
          the last chunk of container log output if the termination message file is
          empty and the container exited with an error. The log output is limited
          to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot
          be updated.
        type: string
      tty:
        description: Whether this container should allocate a TTY for itself, also
          requires 'stdin' to be true. Default is false.
        type: boolean
      volumeDevices:
        description: volumeDevices is the list of block devices to be used by the
          container. This is a beta feature.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeDevice'
        type: array
        x-kubernetes-patch-merge-key: devicePath
        x-kubernetes-patch-strategy: merge
      volumeMounts:
        description: Pod volumes to mount into the container's filesystem. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeMount'
        type: array
        x-kubernetes-patch-merge-key: mountPath
        x-kubernetes-patch-strategy: merge
      workingDir:
        description: Container's working directory. If not specified, the container
          runtime's default will be used, which might be configured in the container
          image. Cannot be updated.
        type: string
    required:
    - name
    type: object
  io.k8s.api.core.v1.ContainerPort:
    description: ContainerPort represents a network port in a single container.
    properties:
      containerPort:
        description: Number of port to expose on the pod's IP address. This must be
          a valid port number, 0 < x < 65536.
        format: int32
        type: integer
      hostIP:
        description: What host IP to bind the external port to.
        type: string
      hostPort:
        description: Number of port to expose on the host. If specified, this must
          be a valid port number, 0 < x < 65536. If HostNetwork is specified, this
          must match ContainerPort. Most containers do not need this.
        format: int32
        type: integer
      name:
        description: If specified, this must be an IANA_SVC_NAME and unique within
          the pod. Each named port in a pod must have a unique name. Name for the
          port that can be referred to by services.
        type: string
      protocol:
        description: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        type: string
    required:
    - containerPort
    type: object
  io.k8s.api.core.v1.DownwardAPIProjection:
    description: Represents downward API info for projecting into a projected volume.
      Note that this is identical to a downwardAPI volume source without the default
      mode.
    properties:
      items:
        description: Items is a list of DownwardAPIVolume file
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile'
        type: array
    type: object
  io.k8s.api.core.v1.DownwardAPIVolumeFile:
    description: DownwardAPIVolumeFile represents information to create the file containing
      the pod field
    properties:
      fieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectFieldSelector'
        description: 'Required: Selects a field of the pod: only annotations, labels,
          name and namespace are supported.'
      mode:
        description: 'Optional: mode bits to use on this file, must be a value between
          0 and 0777. If not specified, the volume defaultMode will be used. This
          might be in conflict with other options that affect the file mode, like
          fsGroup, and the result can be other mode bits set.'
        format: int32
        type: integer
      path:
        description: 'Required: Path is  the relative path name of the file to be
          created. Must not be absolute or contain the ''..'' path. Must be utf-8
          encoded. The first item of the relative path must not start with ''..'''
        type: string
      resourceFieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceFieldSelector'
        description: 'Selects a resource of the container: only resources limits and
          requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are
          currently supported.'
    required:
    - path
    type: object
  io.k8s.api.core.v1.DownwardAPIVolumeSource:
    description: DownwardAPIVolumeSource represents a volume containing downward API
      info. Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: 'Optional: mode bits to use on created files by default. Must
          be a value between 0 and 0777. Defaults to 0644. Directories within the
          path are not affected by this setting. This might be in conflict with other
          options that affect the file mode, like fsGroup, and the result can be other
          mode bits set.'
        format: int32
        type: integer
      items:
        description: Items is a list of downward API volume file
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile'
        type: array
    type: object
  io.k8s.api.core.v1.EmptyDirVolumeSource:
    description: Represents an empty directory for a pod. Empty directory volumes
      support ownership management and SELinux relabeling.
    properties:
      medium:
        description: 'What type of storage medium should back this directory. The
          default is "" which means to use the node''s default medium. Must be an
          empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
        type: string
      sizeLimit:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: 'Total amount of local storage required for this EmptyDir volume.
          The size limit is also applicable for memory medium. The maximum usage on
          memory medium EmptyDir would be the minimum value between the SizeLimit
          specified here and the sum of memory limits of all containers in a pod.
          The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
    type: object
  io.k8s.api.core.v1.EnvFromSource:
    description: EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource'
        description: The ConfigMap to select from
      prefix:
        description: An optional identifier to prepend to each key in the ConfigMap.
          Must be a C_IDENTIFIER.
        type: string
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretEnvSource'
        description: The Secret to select from
    type: object
  io.k8s.api.core.v1.EnvVar:
    description: EnvVar represents an environment variable present in a Container.
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: 'Variable references $(VAR_NAME) are expanded using the previous
          defined environment variables in the container and any service environment
          variables. If a variable cannot be resolved, the reference in the input
          string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double
          $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless
          of whether the variable exists or not. Defaults to "".'
        type: string
      valueFrom:
        $ref: '#/definitions/io.k8s.api.core.v1.EnvVarSource'
        description: Source for the environment variable's value. Cannot be used if
          value is not empty.
    required:
    - name
    type: object
  io.k8s.api.core.v1.EnvVarSource:
    description: EnvVarSource represents a source for the value of an EnvVar.
    properties:
      configMapKeyRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector'
        description: Selects a key of a ConfigMap.
      fieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectFieldSelector'
        description: 'Selects a field of the pod: supports metadata.name, metadata.namespace,
          metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName,
          status.hostIP, status.podIP.'
      resourceFieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceFieldSelector'
        description: 'Selects a resource of the container: only resources limits and
          requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
          requests.memory and requests.ephemeral-storage) are currently supported.'
      secretKeyRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretKeySelector'
        description: Selects a key of a secret in the pod's namespace
    type: object
  io.k8s.api.core.v1.EphemeralContainer:
    description: An EphemeralContainer is a container that may be added temporarily
      to an existing pod for user-initiated activities such as debugging. Ephemeral
      containers have no resource or scheduling guarantees, and they will not be restarted
      when they exit or when a pod is removed or restarted. If an ephemeral container
      causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral
      containers may not be added by directly updating the pod spec. They must be
      added via the pod's ephemeralcontainers subresource, and they will appear in
      the pod spec once added. This is an alpha feature enabled by the EphemeralContainers
      feature flag.
    properties:
      args:
        description: 'Arguments to the entrypoint. The docker image''s CMD is used
          if this is not provided. Variable references $(VAR_NAME) are expanded using
          the container''s environment. If a variable cannot be resolved, the reference
          in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped
          with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not. Cannot be updated. More
          info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        items:
          type: string
        type: array
      command:
        description: 'Entrypoint array. Not executed within a shell. The docker image''s
          ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME)
          are expanded using the container''s environment. If a variable cannot be
          resolved, the reference in the input string will be unchanged. The $(VAR_NAME)
          syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references
          will never be expanded, regardless of whether the variable exists or not.
          Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
        items:
          type: string
        type: array
      env:
        description: List of environment variables to set in the container. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvVar'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      envFrom:
        description: List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key
          exists in multiple sources, the value associated with the last source will
          take precedence. Values defined by an Env with a duplicate key will take
          precedence. Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvFromSource'
        type: array
      image:
        description: 'Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images'
        type: string
      imagePullPolicy:
        description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults
          to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
          be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
        type: string
      lifecycle:
        $ref: '#/definitions/io.k8s.api.core.v1.Lifecycle'
        description: Lifecycle is not allowed for ephemeral containers.
      livenessProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: Probes are not allowed for ephemeral containers.
      name:
        description: Name of the ephemeral container specified as a DNS_LABEL. This
          name must be unique among all containers, init containers and ephemeral
          containers.
        type: string
      ports:
        description: Ports are not allowed for ephemeral containers.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: Probes are not allowed for ephemeral containers.
      resources:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceRequirements'
        description: Resources are not allowed for ephemeral containers. Ephemeral
          containers use spare resources already allocated to the pod.
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.SecurityContext'
        description: SecurityContext is not allowed for ephemeral containers.
      startupProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: Probes are not allowed for ephemeral containers.
      stdin:
        description: Whether this container should allocate a buffer for stdin in
          the container runtime. If this is not set, reads from stdin in the container
          will always result in EOF. Default is false.
        type: boolean
      stdinOnce:
        description: Whether the container runtime should close the stdin channel
          after it has been opened by a single attach. When stdin is true the stdin
          stream will remain open across multiple attach sessions. If stdinOnce is
          set to true, stdin is opened on container start, is empty until the first
          client attaches to stdin, and then remains open and accepts data until the
          client disconnects, at which time stdin is closed and remains closed until
          the container is restarted. If this flag is false, a container processes
          that reads from stdin will never receive an EOF. Default is false
        type: boolean
      targetContainerName:
        description: If set, the name of the container from PodSpec that this ephemeral
          container targets. The ephemeral container will be run in the namespaces
          (IPC, PID, etc) of this container. If not set then the ephemeral container
          is run in whatever namespaces are shared for the pod. Note that the container
          runtime must support this feature.
        type: string
      terminationMessagePath:
        description: 'Optional: Path at which the file to which the container''s termination
          message will be written is mounted into the container''s filesystem. Message
          written is intended to be brief final status, such as an assertion failure
          message. Will be truncated by the node if greater than 4096 bytes. The total
          message length across all containers will be limited to 12kb. Defaults to
          /dev/termination-log. Cannot be updated.'
        type: string
      terminationMessagePolicy:
        description: Indicate how the termination message should be populated. File
          will use the contents of terminationMessagePath to populate the container
          status message on both success and failure. FallbackToLogsOnError will use
          the last chunk of container log output if the termination message file is
          empty and the container exited with an error. The log output is limited
          to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot
          be updated.
        type: string
      tty:
        description: Whether this container should allocate a TTY for itself, also
          requires 'stdin' to be true. Default is false.
        type: boolean
      volumeDevices:
        description: volumeDevices is the list of block devices to be used by the
          container. This is a beta feature.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeDevice'
        type: array
        x-kubernetes-patch-merge-key: devicePath
        x-kubernetes-patch-strategy: merge
      volumeMounts:
        description: Pod volumes to mount into the container's filesystem. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeMount'
        type: array
        x-kubernetes-patch-merge-key: mountPath
        x-kubernetes-patch-strategy: merge
      workingDir:
        description: Container's working directory. If not specified, the container
          runtime's default will be used, which might be configured in the container
          image. Cannot be updated.
        type: string
    required:
    - name
    type: object
  io.k8s.api.core.v1.ExecAction:
    description: ExecAction describes a "run in container" action.
    properties:
      command:
        description: Command is the command line to execute inside the container,
          the working directory for the command  is root ('/') in the container's
          filesystem. The command is simply exec'd, it is not run inside a shell,
          so traditional shell instructions ('|', etc) won't work. To use a shell,
          you need to explicitly call out to that shell. Exit status of 0 is treated
          as live/healthy and non-zero is unhealthy.
        items:
          type: string
        type: array
    type: object
  io.k8s.api.core.v1.FCVolumeSource:
    description: Represents a Fibre Channel volume. Fibre Channel volumes can only
      be mounted as read/write once. Fibre Channel volumes support ownership management
      and SELinux relabeling.
    properties:
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        type: string
      lun:
        description: 'Optional: FC target lun number'
        format: int32
        type: integer
      readOnly:
        description: 'Optional: Defaults to false (read/write). ReadOnly here will
          force the ReadOnly setting in VolumeMounts.'
        type: boolean
      targetWWNs:
        description: 'Optional: FC target worldwide names (WWNs)'
        items:
          type: string
        type: array
      wwids:
        description: 'Optional: FC volume world wide identifiers (wwids) Either wwids
          or combination of targetWWNs and lun must be set, but not both simultaneously.'
        items:
          type: string
        type: array
    type: object
  io.k8s.api.core.v1.FlexVolumeSource:
    description: FlexVolume represents a generic volume resource that is provisioned/attached
      using an exec based plugin.
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem
          depends on FlexVolume script.
        type: string
      options:
        additionalProperties:
          type: string
        description: 'Optional: Extra command options if any.'
        type: object
      readOnly:
        description: 'Optional: Defaults to false (read/write). ReadOnly here will
          force the ReadOnly setting in VolumeMounts.'
        type: boolean
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: 'Optional: SecretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be empty if
          no secret object is specified. If the secret object contains more than one
          secret, all secrets are passed to the plugin scripts.'
    required:
    - driver
    type: object
  io.k8s.api.core.v1.FlockerVolumeSource:
    description: Represents a Flocker volume mounted by the Flocker agent. One and
      only one of datasetName and datasetUUID should be set. Flocker volumes do not
      support ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: Name of the dataset stored as metadata -> name on the dataset
          for Flocker should be considered as deprecated
        type: string
      datasetUUID:
        description: UUID of the dataset. This is unique identifier of a Flocker dataset
        type: string
    type: object
  io.k8s.api.core.v1.GCEPersistentDiskVolumeSource:
    description: |-
      Represents a Persistent Disk resource in Google Compute Engine.

      A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure
          that the filesystem type is supported by the host operating system. Examples:
          "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        type: string
      partition:
        description: 'The partition in the volume that you want to mount. If omitted,
          the default is to mount by volume name. Examples: For volume /dev/sda1,
          you specify the partition as "1". Similarly, the volume partition for /dev/sda
          is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        format: int32
        type: integer
      pdName:
        description: 'Unique name of the PD resource in GCE. Used to identify the
          disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        type: string
      readOnly:
        description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
        type: boolean
    required:
    - pdName
    type: object
  io.k8s.api.core.v1.GitRepoVolumeSource:
    description: |-
      Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    properties:
      directory:
        description: Target directory name. Must not contain or start with '..'.  If
          '.' is supplied, the volume directory will be the git repository.  Otherwise,
          if specified, the volume will contain the git repository in the subdirectory
          with the given name.
        type: string
      repository:
        description: Repository URL
        type: string
      revision:
        description: Commit hash for the specified revision.
        type: string
    required:
    - repository
    type: object
  io.k8s.api.core.v1.GlusterfsVolumeSource:
    description: Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs
      volumes do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        description: 'EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
        type: string
      path:
        description: 'Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
        type: string
      readOnly:
        description: 'ReadOnly here will force the Glusterfs volume to be mounted
          with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod'
        type: boolean
    required:
    - endpoints
    - path
    type: object
  io.k8s.api.core.v1.HTTPGetAction:
    description: HTTPGetAction describes an action based on HTTP Get requests.
    properties:
      host:
        description: Host name to connect to, defaults to the pod IP. You probably
          want to set "Host" in httpHeaders instead.
        type: string
      httpHeaders:
        description: Custom headers to set in the request. HTTP allows repeated headers.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.HTTPHeader'
        type: array
      path:
        description: Path to access on the HTTP server.
        type: string
      port:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: Name or number of the port to access on the container. Number
          must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
      scheme:
        description: Scheme to use for connecting to the host. Defaults to HTTP.
        type: string
    required:
    - port
    type: object
  io.k8s.api.core.v1.HTTPHeader:
    description: HTTPHeader describes a custom header to be used in HTTP probes
    properties:
      name:
        description: The header field name
        type: string
      value:
        description: The header field value
        type: string
    required:
    - name
    - value
    type: object
  io.k8s.api.core.v1.Handler:
    description: Handler defines a specific action that should be taken
    properties:
      exec:
        $ref: '#/definitions/io.k8s.api.core.v1.ExecAction'
        description: One and only one of the following should be specified. Exec specifies
          the action to take.
      httpGet:
        $ref: '#/definitions/io.k8s.api.core.v1.HTTPGetAction'
        description: HTTPGet specifies the http request to perform.
      tcpSocket:
        $ref: '#/definitions/io.k8s.api.core.v1.TCPSocketAction'
        description: TCPSocket specifies an action involving a TCP port. TCP hooks
          not yet supported
    type: object
  io.k8s.api.core.v1.HostAlias:
    description: HostAlias holds the mapping between IP and hostnames that will be
      injected as an entry in the pod's hosts file.
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        items:
          type: string
        type: array
      ip:
        description: IP address of the host file entry.
        type: string
    type: object
  io.k8s.api.core.v1.HostPathVolumeSource:
    description: Represents a host path mapped into a pod. Host path volumes do not
      support ownership management or SELinux relabeling.
    properties:
      path:
        description: 'Path of the directory on the host. If the path is a symlink,
          it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        type: string
      type:
        description: 'Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
        type: string
    required:
    - path
    type: object
  io.k8s.api.core.v1.ISCSIVolumeSource:
    description: Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write
      once. ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: whether support iSCSI Discovery CHAP authentication
        type: boolean
      chapAuthSession:
        description: whether support iSCSI Session CHAP authentication
        type: boolean
      fsType:
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure
          that the filesystem type is supported by the host operating system. Examples:
          "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi'
        type: string
      initiatorName:
        description: Custom iSCSI Initiator Name. If initiatorName is specified with
          iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume
          name> will be created for the connection.
        type: string
      iqn:
        description: Target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: iSCSI Interface Name that uses an iSCSI transport. Defaults to
          'default' (tcp).
        type: string
      lun:
        description: iSCSI Target Lun number.
        format: int32
        type: integer
      portals:
        description: iSCSI Target Portal List. The portal is either an IP or ip_addr:port
          if the port is other than default (typically TCP ports 860 and 3260).
        items:
          type: string
        type: array
      readOnly:
        description: ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
        type: boolean
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: CHAP Secret for iSCSI target and initiator authentication
      targetPortal:
        description: iSCSI Target Portal. The Portal is either an IP or ip_addr:port
          if the port is other than default (typically TCP ports 860 and 3260).
        type: string
    required:
    - targetPortal
    - iqn
    - lun
    type: object
  io.k8s.api.core.v1.KeyToPath:
    description: Maps a string key to a path within a volume.
    properties:
      key:
        description: The key to project.
        type: string
      mode:
        description: 'Optional: mode bits to use on this file, must be a value between
          0 and 0777. If not specified, the volume defaultMode will be used. This
          might be in conflict with other options that affect the file mode, like
          fsGroup, and the result can be other mode bits set.'
        format: int32
        type: integer
      path:
        description: The relative path of the file to map the key to. May not be an
          absolute path. May not contain the path element '..'. May not start with
          the string '..'.
        type: string
    required:
    - key
    - path
    type: object
  io.k8s.api.core.v1.Lifecycle:
    description: Lifecycle describes actions that the management system should take
      in response to container lifecycle events. For the PostStart and PreStop lifecycle
      handlers, management of the container blocks until the action is complete, unless
      the container process fails, in which case the handler is aborted.
    properties:
      postStart:
        $ref: '#/definitions/io.k8s.api.core.v1.Handler'
        description: 'PostStart is called immediately after a container is created.
          If the handler fails, the container is terminated and restarted according
          to its restart policy. Other management of the container blocks until the
          hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
      preStop:
        $ref: '#/definitions/io.k8s.api.core.v1.Handler'
        description: 'PreStop is called immediately before a container is terminated
          due to an API request or management event such as liveness/startup probe
          failure, preemption, resource contention, etc. The handler is not called
          if the container crashes or exits. The reason for termination is passed
          to the handler. The Pod''s termination grace period countdown begins before
          the PreStop hooked is executed. Regardless of the outcome of the handler,
          the container will eventually terminate within the Pod''s termination grace
          period. Other management of the container blocks until the hook completes
          or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks'
    type: object
  io.k8s.api.core.v1.LocalObjectReference:
    description: LocalObjectReference contains enough information to let you locate
      the referenced object inside the same namespace.
    properties:
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
    type: object
  io.k8s.api.core.v1.NFSVolumeSource:
    description: Represents an NFS mount that lasts the lifetime of a pod. NFS volumes
      do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: 'Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        type: string
      readOnly:
        description: 'ReadOnly here will force the NFS export to be mounted with read-only
          permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        type: boolean
      server:
        description: 'Server is the hostname or IP address of the NFS server. More
          info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
        type: string
    required:
    - server
    - path
    type: object
  io.k8s.api.core.v1.NodeAffinity:
    description: Node affinity is a group of node affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose a node
          that violates one or more of the expressions. The node that is most preferred
          is the one with the greatest sum of weights, i.e. for each node that meets
          all of the scheduling requirements (resource request, requiredDuringScheduling
          affinity expressions, etc.), compute a sum by iterating through the elements
          of this field and adding "weight" to the sum if the node matches the corresponding
          matchExpressions; the node(s) with the highest sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: If the affinity requirements specified by this field are not
          met at scheduling time, the pod will not be scheduled onto the node. If
          the affinity requirements specified by this field cease to be met at some
          point during pod execution (e.g. due to an update), the system may or may
          not try to eventually evict the pod from its node.
    type: object
  io.k8s.api.core.v1.NodeSelector:
    description: A node selector represents the union of the results of one or more
      label queries over a set of nodes; that is, it represents the OR of the selectors
      represented by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorTerm'
        type: array
    required:
    - nodeSelectorTerms
    type: object
  io.k8s.api.core.v1.NodeSelectorRequirement:
    description: A node selector requirement is a selector that contains values, a
      key, and an operator that relates the key and values.
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        description: Represents a key's relationship to a set of values. Valid operators
          are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        type: string
      values:
        description: An array of string values. If the operator is In or NotIn, the
          values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
        items:
          type: string
        type: array
    required:
    - key
    - operator
    type: object
  io.k8s.api.core.v1.NodeSelectorTerm:
    description: A null or empty node selector term matches no objects. The requirements
      of them are ANDed. The TopologySelectorTerm type implements a subset of the
      NodeSelectorTerm.
    properties:
      matchExpressions:
        description: A list of node selector requirements by node's labels.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement'
        type: array
      matchFields:
        description: A list of node selector requirements by node's fields.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement'
        type: array
    type: object
  io.k8s.api.core.v1.ObjectFieldSelector:
    description: ObjectFieldSelector selects an APIVersioned field of an object.
    properties:
      apiVersion:
        description: Version of the schema the FieldPath is written in terms of, defaults
          to "v1".
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    required:
    - fieldPath
    type: object
  io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource:
    description: PersistentVolumeClaimVolumeSource references the user's PVC in the
      same namespace. This volume finds the bound PV and mounts that volume for the
      pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
      type of volume that is owned by someone else (the system).
    properties:
      claimName:
        description: 'ClaimName is the name of a PersistentVolumeClaim in the same
          namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
        type: string
      readOnly:
        description: Will force the ReadOnly setting in VolumeMounts. Default false.
        type: boolean
    required:
    - claimName
    type: object
  io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource:
    description: Represents a Photon Controller persistent disk resource.
    properties:
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        type: string
      pdID:
        description: ID that identifies Photon Controller persistent disk
        type: string
    required:
    - pdID
    type: object
  io.k8s.api.core.v1.PodAffinity:
    description: Pod affinity is a group of inter pod affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose a node
          that violates one or more of the expressions. The node that is most preferred
          is the one with the greatest sum of weights, i.e. for each node that meets
          all of the scheduling requirements (resource request, requiredDuringScheduling
          affinity expressions, etc.), compute a sum by iterating through the elements
          of this field and adding "weight" to the sum if the node has pods which
          matches the corresponding podAffinityTerm; the node(s) with the highest
          sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: If the affinity requirements specified by this field are not
          met at scheduling time, the pod will not be scheduled onto the node. If
          the affinity requirements specified by this field cease to be met at some
          point during pod execution (e.g. due to a pod label update), the system
          may or may not try to eventually evict the pod from its node. When there
          are multiple elements, the lists of nodes corresponding to each podAffinityTerm
          are intersected, i.e. all terms must be satisfied.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        type: array
    type: object
  io.k8s.api.core.v1.PodAffinityTerm:
    description: Defines a set of pods (namely those matching the labelSelector relative
      to the given namespace(s)) that this pod should be co-located (affinity) or
      not co-located (anti-affinity) with, where co-located is defined as running
      on a node whose value of the label with key <topologyKey> matches that of any
      node on which a pod of the set of pods is running
    properties:
      labelSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: A label query over a set of resources, in this case pods.
      namespaces:
        description: namespaces specifies which namespaces the labelSelector applies
          to (matches against); null or empty list means "this pod's namespace"
        items:
          type: string
        type: array
      topologyKey:
        description: This pod should be co-located (affinity) or not co-located (anti-affinity)
          with the pods matching the labelSelector in the specified namespaces, where
          co-located is defined as running on a node whose value of the label with
          key topologyKey matches that of any node on which any of the selected pods
          is running. Empty topologyKey is not allowed.
        type: string
    required:
    - topologyKey
    type: object
  io.k8s.api.core.v1.PodAntiAffinity:
    description: Pod anti affinity is a group of inter pod anti affinity scheduling
      rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is most
          preferred is the one with the greatest sum of weights, i.e. for each node
          that meets all of the scheduling requirements (resource request, requiredDuringScheduling
          anti-affinity expressions, etc.), compute a sum by iterating through the
          elements of this field and adding "weight" to the sum if the node has pods
          which matches the corresponding podAffinityTerm; the node(s) with the highest
          sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: If the anti-affinity requirements specified by this field are
          not met at scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node. When
          there are multiple elements, the lists of nodes corresponding to each podAffinityTerm
          are intersected, i.e. all terms must be satisfied.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        type: array
    type: object
  io.k8s.api.core.v1.PodDNSConfig:
    description: PodDNSConfig defines the DNS parameters of a pod in addition to those
      generated from DNSPolicy.
    properties:
      nameservers:
        description: A list of DNS name server IP addresses. This will be appended
          to the base nameservers generated from DNSPolicy. Duplicated nameservers
          will be removed.
        items:
          type: string
        type: array
      options:
        description: A list of DNS resolver options. This will be merged with the
          base options generated from DNSPolicy. Duplicated entries will be removed.
          Resolution options given in Options will override those that appear in the
          base DNSPolicy.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodDNSConfigOption'
        type: array
      searches:
        description: A list of DNS search domains for host-name lookup. This will
          be appended to the base search paths generated from DNSPolicy. Duplicated
          search paths will be removed.
        items:
          type: string
        type: array
    type: object
  io.k8s.api.core.v1.PodDNSConfigOption:
    description: PodDNSConfigOption defines DNS resolver options of a pod.
    properties:
      name:
        description: Required.
        type: string
      value:
        type: string
    type: object
  io.k8s.api.core.v1.PodReadinessGate:
    description: PodReadinessGate contains the reference to a pod condition
    properties:
      conditionType:
        description: ConditionType refers to a condition in the pod's condition list
          with matching type.
        type: string
    required:
    - conditionType
    type: object
  io.k8s.api.core.v1.PodSecurityContext:
    description: PodSecurityContext holds pod-level security attributes and common
      container settings. Some fields are also present in container.securityContext.  Field
      values of container.securityContext take precedence over field values of PodSecurityContext.
    properties:
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:

          1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
        format: int64
        type: integer
      runAsGroup:
        description: The GID to run the entrypoint of the container process. Uses
          runtime default if unset. May also be set in SecurityContext.  If set in
          both SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence for that container.
        format: int64
        type: integer
      runAsNonRoot:
        description: Indicates that the container must run as a non-root user. If
          true, the Kubelet will validate the image at runtime to ensure that it does
          not run as UID 0 (root) and fail to start the container if it does. If unset
          or false, no such validation will be performed. May also be set in SecurityContext.  If
          set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence.
        type: boolean
      runAsUser:
        description: The UID to run the entrypoint of the container process. Defaults
          to user specified in image metadata if unspecified. May also be set in SecurityContext.  If
          set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence for that container.
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.SELinuxOptions'
        description: The SELinux context to be applied to all containers. If unspecified,
          the container runtime will allocate a random SELinux context for each container.  May
          also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext,
          the value specified in SecurityContext takes precedence for that container.
      supplementalGroups:
        description: A list of groups applied to the first process run in each container,
          in addition to the container's primary GID.  If unspecified, no groups will
          be added to any container.
        items:
          format: int64
          type: integer
        type: array
      sysctls:
        description: Sysctls hold a list of namespaced sysctls used for the pod. Pods
          with unsupported sysctls (by the container runtime) might fail to launch.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Sysctl'
        type: array
      windowsOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions'
        description: The Windows specific settings applied to all containers. If unspecified,
          the options within a container's SecurityContext will be used. If set in
          both SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence.
    type: object
  io.k8s.api.core.v1.PodSpec:
    description: PodSpec is a description of a pod.
    properties:
      activeDeadlineSeconds:
        description: Optional duration in seconds the pod may be active on the node
          relative to StartTime before the system will actively try to mark it failed
          and kill associated containers. Value must be a positive integer.
        format: int64
        type: integer
      affinity:
        $ref: '#/definitions/io.k8s.api.core.v1.Affinity'
        description: If specified, the pod's scheduling constraints
      automountServiceAccountToken:
        description: AutomountServiceAccountToken indicates whether a service account
          token should be automatically mounted.
        type: boolean
      containers:
        description: List of containers belonging to the pod. Containers cannot currently
          be added or removed. There must be at least one container in a Pod. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      dnsConfig:
        $ref: '#/definitions/io.k8s.api.core.v1.PodDNSConfig'
        description: Specifies the DNS parameters of a pod. Parameters specified here
          will be merged to the generated DNS configuration based on DNSPolicy.
      dnsPolicy:
        description: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid
          values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
          DNS parameters given in DNSConfig will be merged with the policy selected
          with DNSPolicy. To have DNS options set along with hostNetwork, you have
          to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        type: string
      enableServiceLinks:
        description: 'EnableServiceLinks indicates whether information about services
          should be injected into pod''s environment variables, matching the syntax
          of Docker links. Optional: Defaults to true.'
        type: boolean
      ephemeralContainers:
        description: List of ephemeral containers run in this pod. Ephemeral containers
          may be run in an existing pod to perform user-initiated actions such as
          debugging. This list cannot be specified when creating a pod, and it cannot
          be modified by updating the pod spec. In order to add an ephemeral container
          to an existing pod, use the pod's ephemeralcontainers subresource. This
          field is alpha-level and is only honored by servers that enable the EphemeralContainers
          feature.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EphemeralContainer'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      hostAliases:
        description: HostAliases is an optional list of hosts and IPs that will be
          injected into the pod's hosts file if specified. This is only valid for
          non-hostNetwork pods.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.HostAlias'
        type: array
        x-kubernetes-patch-merge-key: ip
        x-kubernetes-patch-strategy: merge
      hostIPC:
        description: 'Use the host''s ipc namespace. Optional: Default to false.'
        type: boolean
      hostNetwork:
        description: Host networking requested for this pod. Use the host's network
          namespace. If this option is set, the ports that will be used must be specified.
          Default to false.
        type: boolean
      hostPID:
        description: 'Use the host''s pid namespace. Optional: Default to false.'
        type: boolean
      hostname:
        description: Specifies the hostname of the Pod If not specified, the pod's
          hostname will be set to a system-defined value.
        type: string
      imagePullSecrets:
        description: 'ImagePullSecrets is an optional list of references to secrets
          in the same namespace to use for pulling any of the images used by this
          PodSpec. If specified, these secrets will be passed to individual puller
          implementations for them to use. For example, in the case of docker, only
          DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      initContainers:
        description: 'List of initialization containers belonging to the pod. Init
          containers are executed in order prior to containers being started. If any
          init container fails, the pod is considered to have failed and is handled
          according to its restartPolicy. The name for an init container or normal
          container must be unique among all containers. Init containers may not have
          Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
          The resourceRequirements of an init container are taken into account during
          scheduling by finding the highest request/limit for each resource type,
          and then using the max of of that value or the sum of the normal containers.
          Limits are applied to init containers in a similar fashion. Init containers
          cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/'
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      nodeName:
        description: NodeName is a request to schedule this pod onto a specific node.
          If it is non-empty, the scheduler simply schedules this pod onto that node,
          assuming that it fits resource requirements.
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        description: 'NodeSelector is a selector which must be true for the pod to
          fit on a node. Selector which must match a node''s labels for the pod to
          be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
        type: object
      overhead:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: 'Overhead represents the resource overhead associated with running
          a pod for a given RuntimeClass. This field will be autopopulated at admission
          time by the RuntimeClass admission controller. If the RuntimeClass admission
          controller is enabled, overhead must not be set in Pod create requests.
          The RuntimeClass admission controller will reject Pod create requests which
          have the overhead already set. If RuntimeClass is configured and selected
          in the PodSpec, Overhead will be set to the value defined in the corresponding
          RuntimeClass, otherwise it will remain unset and treated as zero. More info:
          https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This
          field is alpha-level as of Kubernetes v1.16, and is only honored by servers
          that enable the PodOverhead feature.'
        type: object
      preemptionPolicy:
        description: PreemptionPolicy is the Policy for preempting pods with lower
          priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority
          if unset. This field is alpha-level and is only honored by servers that
          enable the NonPreemptingPriority feature.
        type: string
      priority:
        description: The priority value. Various system components use this field
          to find the priority of the pod. When Priority Admission Controller is enabled,
          it prevents users from setting this field. The admission controller populates
          this field from PriorityClassName. The higher the value, the higher the
          priority.
        format: int32
        type: integer
      priorityClassName:
        description: If specified, indicates the pod's priority. "system-node-critical"
          and "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any other
          name must be defined by creating a PriorityClass object with that name.
          If not specified, the pod priority will be default or zero if there is no
          default.
        type: string
      readinessGates:
        description: 'If specified, all readiness gates will be evaluated for pod
          readiness. A pod is ready when all its containers are ready AND all conditions
          specified in the readiness gates have status equal to "True" More info:
          https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md'
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodReadinessGate'
        type: array
      restartPolicy:
        description: 'Restart policy for all containers within the pod. One of Always,
          OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy'
        type: string
      runtimeClassName:
        description: 'RuntimeClassName refers to a RuntimeClass object in the node.k8s.io
          group, which should be used to run this pod.  If no RuntimeClass resource
          matches the named class, the pod will not be run. If unset or empty, the
          "legacy" RuntimeClass will be used, which is an implicit class with an empty
          definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
          This is a beta feature as of Kubernetes v1.14.'
        type: string
      schedulerName:
        description: If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
        type: string
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSecurityContext'
        description: 'SecurityContext holds pod-level security attributes and common
          container settings. Optional: Defaults to empty.  See type description for
          default values of each field.'
      serviceAccount:
        description: 'DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.'
        type: string
      serviceAccountName:
        description: 'ServiceAccountName is the name of the ServiceAccount to use
          to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
        type: string
      shareProcessNamespace:
        description: 'Share a single process namespace between all of the containers
          in a pod. When this is set containers will be able to view and signal processes
          from other containers in the same pod, and the first process in each container
          will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both
          be set. Optional: Default to false. This field is beta-level and may be
          disabled with the PodShareProcessNamespace feature.'
        type: boolean
      subdomain:
        description: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod
          namespace>.svc.<cluster domain>". If not specified, the pod will not have
          a domainname at all.
        type: string
      terminationGracePeriodSeconds:
        description: Optional duration in seconds the pod needs to terminate gracefully.
          May be decreased in delete request. Value must be non-negative integer.
          The value zero indicates delete immediately. If this value is nil, the default
          grace period will be used instead. The grace period is the duration in seconds
          after the processes running in the pod are sent a termination signal and
          the time when the processes are forcibly halted with a kill signal. Set
          this value longer than the expected cleanup time for your process. Defaults
          to 30 seconds.
        format: int64
        type: integer
      tolerations:
        description: If specified, the pod's tolerations.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Toleration'
        type: array
      topologySpreadConstraints:
        description: TopologySpreadConstraints describes how a group of pods ought
          to spread across topology domains. Scheduler will schedule pods in a way
          which abides by the constraints. This field is alpha-level and is only honored
          by clusters that enables the EvenPodsSpread feature. All topologySpreadConstraints
          are ANDed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint'
        type: array
        x-kubernetes-list-map-keys:
        - topologyKey
        - whenUnsatisfiable
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: topologyKey
        x-kubernetes-patch-strategy: merge
      volumes:
        description: 'List of volumes that can be mounted by containers belonging
          to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes'
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Volume'
        type: array
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge,retainKeys
    required:
    - containers
    type: object
  io.k8s.api.core.v1.PodTemplateSpec:
    description: PodTemplateSpec describes the data a pod should have when created
      from a template
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec'
        description: 'Specification of the desired behavior of the pod. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
    type: object
  io.k8s.api.core.v1.PortworxVolumeSource:
    description: PortworxVolumeSource represents a Portworx volume resource.
    properties:
      fsType:
        description: FSType represents the filesystem type to mount Must be a filesystem
          type supported by the host operating system. Ex. "ext4", "xfs". Implicitly
          inferred to be "ext4" if unspecified.
        type: string
      readOnly:
        description: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        type: boolean
      volumeID:
        description: VolumeID uniquely identifies a Portworx volume
        type: string
    required:
    - volumeID
    type: object
  io.k8s.api.core.v1.PreferredSchedulingTerm:
    description: An empty preferred scheduling term matches all objects with implicit
      weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects
      (i.e. is also a no-op).
    properties:
      preference:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorTerm'
        description: A node selector term, associated with the corresponding weight.
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm,
          in the range 1-100.
        format: int32
        type: integer
    required:
    - weight
    - preference
    type: object
  io.k8s.api.core.v1.Probe:
    description: Probe describes a health check to be performed against a container
      to determine whether it is alive or ready to receive traffic.
    properties:
      exec:
        $ref: '#/definitions/io.k8s.api.core.v1.ExecAction'
        description: One and only one of the following should be specified. Exec specifies
          the action to take.
      failureThreshold:
        description: Minimum consecutive failures for the probe to be considered failed
          after having succeeded. Defaults to 3. Minimum value is 1.
        format: int32
        type: integer
      httpGet:
        $ref: '#/definitions/io.k8s.api.core.v1.HTTPGetAction'
        description: HTTPGet specifies the http request to perform.
      initialDelaySeconds:
        description: 'Number of seconds after the container has started before liveness
          probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        format: int32
        type: integer
      periodSeconds:
        description: How often (in seconds) to perform the probe. Default to 10 seconds.
          Minimum value is 1.
        format: int32
        type: integer
      successThreshold:
        description: Minimum consecutive successes for the probe to be considered
          successful after having failed. Defaults to 1. Must be 1 for liveness and
          startup. Minimum value is 1.
        format: int32
        type: integer
      tcpSocket:
        $ref: '#/definitions/io.k8s.api.core.v1.TCPSocketAction'
        description: TCPSocket specifies an action involving a TCP port. TCP hooks
          not yet supported
      timeoutSeconds:
        description: 'Number of seconds after which the probe times out. Defaults
          to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        format: int32
        type: integer
    type: object
  io.k8s.api.core.v1.ProjectedVolumeSource:
    description: Represents a projected volume source
    properties:
      defaultMode:
        description: Mode bits to use on created files by default. Must be a value
          between 0 and 0777. Directories within the path are not affected by this
          setting. This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
        format: int32
        type: integer
      sources:
        description: list of volume projections
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeProjection'
        type: array
    required:
    - sources
    type: object
  io.k8s.api.core.v1.QuobyteVolumeSource:
    description: Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte
      volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        description: Group to map volume access to Default is no group
        type: string
      readOnly:
        description: ReadOnly here will force the Quobyte volume to be mounted with
          read-only permissions. Defaults to false.
        type: boolean
      registry:
        description: Registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated
          with commas) which acts as the central registry for volumes
        type: string
      tenant:
        description: Tenant owning the given Quobyte volume in the Backend Used with
          dynamically provisioned Quobyte volumes, value is set by the plugin
        type: string
      user:
        description: User to map volume access to Defaults to serivceaccount user
        type: string
      volume:
        description: Volume is a string that references an already created Quobyte
          volume by name.
        type: string
    required:
    - registry
    - volume
    type: object
  io.k8s.api.core.v1.RBDVolumeSource:
    description: Represents a Rados Block Device mount that lasts the lifetime of
      a pod. RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: 'Filesystem type of the volume that you want to mount. Tip: Ensure
          that the filesystem type is supported by the host operating system. Examples:
          "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd'
        type: string
      image:
        description: 'The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        type: string
      keyring:
        description: 'Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        type: string
      monitors:
        description: 'A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        items:
          type: string
        type: array
      pool:
        description: 'The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        type: string
      readOnly:
        description: 'ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        type: boolean
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: 'SecretRef is name of the authentication secret for RBDUser.
          If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
      user:
        description: 'The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it'
        type: string
    required:
    - monitors
    - image
    type: object
  io.k8s.api.core.v1.ResourceFieldSelector:
    description: ResourceFieldSelector represents container resources (cpu, memory)
      and their output format
    properties:
      containerName:
        description: 'Container name: required for volumes, optional for env vars'
        type: string
      divisor:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: Specifies the output format of the exposed resources, defaults
          to "1"
      resource:
        description: 'Required: resource to select'
        type: string
    required:
    - resource
    type: object
  io.k8s.api.core.v1.ResourceRequirements:
    description: ResourceRequirements describes the compute resource requirements.
    properties:
      limits:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: 'Limits describes the maximum amount of compute resources allowed.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        type: object
      requests:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: 'Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that is
          explicitly specified, otherwise to an implementation-defined value. More
          info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
        type: object
    type: object
  io.k8s.api.core.v1.SELinuxOptions:
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: Level is SELinux level label that applies to the container.
        type: string
      role:
        description: Role is a SELinux role label that applies to the container.
        type: string
      type:
        description: Type is a SELinux type label that applies to the container.
        type: string
      user:
        description: User is a SELinux user label that applies to the container.
        type: string
    type: object
  io.k8s.api.core.v1.ScaleIOVolumeSource:
    description: ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        type: string
      gateway:
        description: The host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: The name of the ScaleIO Protection Domain for the configured
          storage.
        type: string
      readOnly:
        description: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        type: boolean
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: SecretRef references to the secret for ScaleIO user and other
          sensitive information. If this is not provided, Login operation will fail.
      sslEnabled:
        description: Flag to enable/disable SSL communication with Gateway, default
          false
        type: boolean
      storageMode:
        description: Indicates whether the storage for a volume should be ThickProvisioned
          or ThinProvisioned. Default is ThinProvisioned.
        type: string
      storagePool:
        description: The ScaleIO Storage Pool associated with the protection domain.
        type: string
      system:
        description: The name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: The name of a volume already created in the ScaleIO system that
          is associated with this volume source.
        type: string
    required:
    - gateway
    - system
    - secretRef
    type: object
  io.k8s.api.core.v1.SecretEnvSource:
    description: |-
      SecretEnvSource selects a Secret to populate the environment variables with.

      The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
    properties:
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the Secret must be defined
        type: boolean
    type: object
  io.k8s.api.core.v1.SecretKeySelector:
    description: SecretKeySelector selects a key of a Secret.
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret
          key.
        type: string
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the Secret or its key must be defined
        type: boolean
    required:
    - key
    type: object
  io.k8s.api.core.v1.SecretProjection:
    description: |-
      Adapts a secret into a projected volume.

      The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
    properties:
      items:
        description: If unspecified, each key-value pair in the Data field of the
          referenced Secret will be projected into the volume as a file whose name
          is the key and content is the value. If specified, the listed keys will
          be projected into the specified paths, and unlisted keys will not be present.
          If a key is specified which is not present in the Secret, the volume setup
          will error unless it is marked optional. Paths must be relative and may
          not contain the '..' path or start with '..'.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
      name:
        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      optional:
        description: Specify whether the Secret or its key must be defined
        type: boolean
    type: object
  io.k8s.api.core.v1.SecretVolumeSource:
    description: |-
      Adapts a Secret into a volume.

      The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: 'Optional: mode bits to use on created files by default. Must
          be a value between 0 and 0777. Defaults to 0644. Directories within the
          path are not affected by this setting. This might be in conflict with other
          options that affect the file mode, like fsGroup, and the result can be other
          mode bits set.'
        format: int32
        type: integer
      items:
        description: If unspecified, each key-value pair in the Data field of the
          referenced Secret will be projected into the volume as a file whose name
          is the key and content is the value. If specified, the listed keys will
          be projected into the specified paths, and unlisted keys will not be present.
          If a key is specified which is not present in the Secret, the volume setup
          will error unless it is marked optional. Paths must be relative and may
          not contain the '..' path or start with '..'.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
      optional:
        description: Specify whether the Secret or its keys must be defined
        type: boolean
      secretName:
        description: 'Name of the secret in the pod''s namespace to use. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#secret'
        type: string
    type: object
  io.k8s.api.core.v1.SecurityContext:
    description: SecurityContext holds security configuration that will be applied
      to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When
      both are set, the values in SecurityContext take precedence.
    properties:
      allowPrivilegeEscalation:
        description: 'AllowPrivilegeEscalation controls whether a process can gain
          more privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation
          is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN'
        type: boolean
      capabilities:
        $ref: '#/definitions/io.k8s.api.core.v1.Capabilities'
        description: The capabilities to add/drop when running containers. Defaults
          to the default set of capabilities granted by the container runtime.
      privileged:
        description: Run container in privileged mode. Processes in privileged containers
          are essentially equivalent to root on the host. Defaults to false.
        type: boolean
      procMount:
        description: procMount denotes the type of proc mount to use for the containers.
          The default is DefaultProcMount which uses the container runtime defaults
          for readonly paths and masked paths. This requires the ProcMountType feature
          flag to be enabled.
        type: string
      readOnlyRootFilesystem:
        description: Whether this container has a read-only root filesystem. Default
          is false.
        type: boolean
      runAsGroup:
        description: The GID to run the entrypoint of the container process. Uses
          runtime default if unset. May also be set in PodSecurityContext.  If set
          in both SecurityContext and PodSecurityContext, the value specified in SecurityContext
          takes precedence.
        format: int64
        type: integer
      runAsNonRoot:
        description: Indicates that the container must run as a non-root user. If
          true, the Kubelet will validate the image at runtime to ensure that it does
          not run as UID 0 (root) and fail to start the container if it does. If unset
          or false, no such validation will be performed. May also be set in PodSecurityContext.  If
          set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence.
        type: boolean
      runAsUser:
        description: The UID to run the entrypoint of the container process. Defaults
          to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If
          set in both SecurityContext and PodSecurityContext, the value specified
          in SecurityContext takes precedence.
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.SELinuxOptions'
        description: The SELinux context to be applied to the container. If unspecified,
          the container runtime will allocate a random SELinux context for each container.  May
          also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext,
          the value specified in SecurityContext takes precedence.
      windowsOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions'
        description: The Windows specific settings applied to all containers. If unspecified,
          the options from the PodSecurityContext will be used. If set in both SecurityContext
          and PodSecurityContext, the value specified in SecurityContext takes precedence.
    type: object
  io.k8s.api.core.v1.ServiceAccountTokenProjection:
    description: ServiceAccountTokenProjection represents a projected service account
      token volume. This projection can be used to insert a service account token
      into the pods runtime filesystem for use against APIs (Kubernetes API Server
      or otherwise).
    properties:
      audience:
        description: Audience is the intended audience of the token. A recipient of
          a token must identify itself with an identifier specified in the audience
          of the token, and otherwise should reject the token. The audience defaults
          to the identifier of the apiserver.
        type: string
      expirationSeconds:
        description: ExpirationSeconds is the requested duration of validity of the
          service account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
        format: int64
        type: integer
      path:
        description: Path is the path relative to the mount point of the file to project
          the token into.
        type: string
    required:
    - path
    type: object
  io.k8s.api.core.v1.StorageOSVolumeSource:
    description: Represents a StorageOS persistent volume resource.
    properties:
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        type: string
      readOnly:
        description: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        type: boolean
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: SecretRef specifies the secret to use for obtaining the StorageOS
          API credentials.  If not specified, default values will be attempted.
      volumeName:
        description: VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        type: string
      volumeNamespace:
        description: VolumeNamespace specifies the scope of the volume within StorageOS.  If
          no namespace is specified then the Pod's namespace will be used.  This allows
          the Kubernetes name scoping to be mirrored within StorageOS for tighter
          integration. Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS. Namespaces
          that do not pre-exist within StorageOS will be created.
        type: string
    type: object
  io.k8s.api.core.v1.Sysctl:
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: Name of a property to set
        type: string
      value:
        description: Value of a property to set
        type: string
    required:
    - name
    - value
    type: object
  io.k8s.api.core.v1.TCPSocketAction:
    description: TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        description: 'Optional: Host name to connect to, defaults to the pod IP.'
        type: string
      port:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: Number or name of the port to access on the container. Number
          must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    required:
    - port
    type: object
  io.k8s.api.core.v1.Toleration:
    description: The pod this Toleration is attached to tolerates any taint that matches
      the triple <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        description: Effect indicates the taint effect to match. Empty means match
          all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule
          and NoExecute.
        type: string
      key:
        description: Key is the taint key that the toleration applies to. Empty means
          match all taint keys. If the key is empty, operator must be Exists; this
          combination means to match all values and all keys.
        type: string
      operator:
        description: Operator represents a key's relationship to the value. Valid
          operators are Exists and Equal. Defaults to Equal. Exists is equivalent
          to wildcard for value, so that a pod can tolerate all taints of a particular
          category.
        type: string
      tolerationSeconds:
        description: TolerationSeconds represents the period of time the toleration
          (which must be of effect NoExecute, otherwise this field is ignored) tolerates
          the taint. By default, it is not set, which means tolerate the taint forever
          (do not evict). Zero and negative values will be treated as 0 (evict immediately)
          by the system.
        format: int64
        type: integer
      value:
        description: Value is the taint value the toleration matches to. If the operator
          is Exists, the value should be empty, otherwise just a regular string.
        type: string
    type: object
  io.k8s.api.core.v1.TopologySpreadConstraint:
    description: TopologySpreadConstraint specifies how to spread matching pods among
      the given topology.
    properties:
      labelSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: LabelSelector is used to find matching pods. Pods that match
          this label selector are counted to determine the number of pods in their
          corresponding topology domain.
      maxSkew:
        description: 'MaxSkew describes the degree to which pods may be unevenly distributed.
          It''s the maximum permitted difference between the number of matching pods
          in any two topology domains of a given topology type. For example, in a
          3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector
          spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if
          MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1;
          scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2)
          violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto
          any zone. It''s a required field. Default value is 1 and 0 is not allowed.'
        format: int32
        type: integer
      topologyKey:
        description: TopologyKey is the key of node labels. Nodes that have a label
          with this key and identical values are considered to be in the same topology.
          We consider each <key, value> as a "bucket", and try to put balanced number
          of pods into each bucket. It's a required field.
        type: string
      whenUnsatisfiable:
        description: 'WhenUnsatisfiable indicates how to deal with a pod if it doesn''t
          satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler
          not to schedule it - ScheduleAnyway tells the scheduler to still schedule
          it It''s considered as "Unsatisfiable" if and only if placing incoming pod
          on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew
          is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1
          | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set
          to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to
          become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1).
          In other words, the cluster can still be imbalanced, but scheduler won''t
          make it *more* imbalanced. It''s a required field.'
        type: string
    required:
    - maxSkew
    - topologyKey
    - whenUnsatisfiable
    type: object
  io.k8s.api.core.v1.Volume:
    description: Volume represents a named volume in a pod that may be accessed by
      any container in the pod.
    properties:
      awsElasticBlockStore:
        $ref: '#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource'
        description: 'AWSElasticBlockStore represents an AWS Disk resource that is
          attached to a kubelet''s host machine and then exposed to the pod. More
          info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
      azureDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource'
        description: AzureDisk represents an Azure Data Disk mount on the host and
          bind mount to the pod.
      azureFile:
        $ref: '#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource'
        description: AzureFile represents an Azure File Service mount on the host
          and bind mount to the pod.
      cephfs:
        $ref: '#/definitions/io.k8s.api.core.v1.CephFSVolumeSource'
        description: CephFS represents a Ceph FS mount on the host that shares a pod's
          lifetime
      cinder:
        $ref: '#/definitions/io.k8s.api.core.v1.CinderVolumeSource'
        description: 'Cinder represents a cinder volume attached and mounted on kubelets
          host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md'
      configMap:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource'
        description: ConfigMap represents a configMap that should populate this volume
      csi:
        $ref: '#/definitions/io.k8s.api.core.v1.CSIVolumeSource'
        description: CSI (Container Storage Interface) represents storage that is
          handled by an external CSI driver (Alpha feature).
      downwardAPI:
        $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource'
        description: DownwardAPI represents downward API about the pod that should
          populate this volume
      emptyDir:
        $ref: '#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource'
        description: 'EmptyDir represents a temporary directory that shares a pod''s
          lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
      fc:
        $ref: '#/definitions/io.k8s.api.core.v1.FCVolumeSource'
        description: FC represents a Fibre Channel resource that is attached to a
          kubelet's host machine and then exposed to the pod.
      flexVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.FlexVolumeSource'
        description: FlexVolume represents a generic volume resource that is provisioned/attached
          using an exec based plugin.
      flocker:
        $ref: '#/definitions/io.k8s.api.core.v1.FlockerVolumeSource'
        description: Flocker represents a Flocker volume attached to a kubelet's host
          machine. This depends on the Flocker control service being running
      gcePersistentDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource'
        description: 'GCEPersistentDisk represents a GCE Disk resource that is attached
          to a kubelet''s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk'
      gitRepo:
        $ref: '#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource'
        description: 'GitRepo represents a git repository at a particular revision.
          DEPRECATED: GitRepo is deprecated. To provision a container with a git repo,
          mount an EmptyDir into an InitContainer that clones the repo using git,
          then mount the EmptyDir into the Pod''s container.'
      glusterfs:
        $ref: '#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource'
        description: 'Glusterfs represents a Glusterfs mount on the host that shares
          a pod''s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md'
      hostPath:
        $ref: '#/definitions/io.k8s.api.core.v1.HostPathVolumeSource'
        description: 'HostPath represents a pre-existing file or directory on the
          host machine that is directly exposed to the container. This is generally
          used for system agents or other privileged things that are allowed to see
          the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath'
      iscsi:
        $ref: '#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource'
        description: 'ISCSI represents an ISCSI Disk resource that is attached to
          a kubelet''s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md'
      name:
        description: 'Volume''s name. Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
        type: string
      nfs:
        $ref: '#/definitions/io.k8s.api.core.v1.NFSVolumeSource'
        description: 'NFS represents an NFS mount on the host that shares a pod''s
          lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs'
      persistentVolumeClaim:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource'
        description: 'PersistentVolumeClaimVolumeSource represents a reference to
          a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
      photonPersistentDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource'
        description: PhotonPersistentDisk represents a PhotonController persistent
          disk attached and mounted on kubelets host machine
      portworxVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.PortworxVolumeSource'
        description: PortworxVolume represents a portworx volume attached and mounted
          on kubelets host machine
      projected:
        $ref: '#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource'
        description: Items for all in one resources secrets, configmaps, and downward
          API
      quobyte:
        $ref: '#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource'
        description: Quobyte represents a Quobyte mount on the host that shares a
          pod's lifetime
      rbd:
        $ref: '#/definitions/io.k8s.api.core.v1.RBDVolumeSource'
        description: 'RBD represents a Rados Block Device mount on the host that shares
          a pod''s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md'
      scaleIO:
        $ref: '#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource'
        description: ScaleIO represents a ScaleIO persistent volume attached and mounted
          on Kubernetes nodes.
      secret:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretVolumeSource'
        description: 'Secret represents a secret that should populate this volume.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret'
      storageos:
        $ref: '#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource'
        description: StorageOS represents a StorageOS volume attached and mounted
          on Kubernetes nodes.
      vsphereVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource'
        description: VsphereVolume represents a vSphere volume attached and mounted
          on kubelets host machine
    required:
    - name
    type: object
  io.k8s.api.core.v1.VolumeDevice:
    description: volumeDevice describes a mapping of a raw block device within a container.
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device
          will be mapped to.
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
    required:
    - name
    - devicePath
    type: object
  io.k8s.api.core.v1.VolumeMount:
    description: VolumeMount describes a mounting of a Volume within a container.
    properties:
      mountPath:
        description: Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
      mountPropagation:
        description: mountPropagation determines how mounts are propagated from the
          host to container and the other way around. When not set, MountPropagationNone
          is used. This field is beta in 1.10.
        type: string
      name:
        description: This must match the Name of a Volume.
        type: string
      readOnly:
        description: Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
        type: boolean
      subPath:
        description: Path within the volume from which the container's volume should
          be mounted. Defaults to "" (volume's root).
        type: string
      subPathExpr:
        description: Expanded path within the volume from which the container's volume
          should be mounted. Behaves similarly to SubPath but environment variable
          references $(VAR_NAME) are expanded using the container's environment. Defaults
          to "" (volume's root). SubPathExpr and SubPath are mutually exclusive. This
          field is beta in 1.15.
        type: string
    required:
    - name
    - mountPath
    type: object
  io.k8s.api.core.v1.VolumeProjection:
    description: Projection that may be projected along with other supported volume
      types
    properties:
      configMap:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapProjection'
        description: information about the configMap data to project
      downwardAPI:
        $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIProjection'
        description: information about the downwardAPI data to project
      secret:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretProjection'
        description: information about the secret data to project
      serviceAccountToken:
        $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection'
        description: information about the serviceAccountToken data to project
    type: object
  io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource:
    description: Represents a vSphere volume resource.
    properties:
      fsType:
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        type: string
      storagePolicyID:
        description: Storage Policy Based Management (SPBM) profile ID associated
          with the StoragePolicyName.
        type: string
      storagePolicyName:
        description: Storage Policy Based Management (SPBM) profile name.
        type: string
      volumePath:
        description: Path that identifies vSphere volume vmdk
        type: string
    required:
    - volumePath
    type: object
  io.k8s.api.core.v1.WeightedPodAffinityTerm:
    description: The weights of all of the matched WeightedPodAffinityTerm fields
      are added per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        description: Required. A pod affinity term, associated with the corresponding
          weight.
      weight:
        description: weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        format: int32
        type: integer
    required:
    - weight
    - podAffinityTerm
    type: object
  io.k8s.api.core.v1.WindowsSecurityContextOptions:
    description: WindowsSecurityContextOptions contain Windows-specific options and
      credentials.
    properties:
      gmsaCredentialSpec:
        description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa)
          inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName
          field. This field is alpha-level and is only honored by servers that enable
          the WindowsGMSA feature flag.
        type: string
      gmsaCredentialSpecName:
        description: GMSACredentialSpecName is the name of the GMSA credential spec
          to use. This field is alpha-level and is only honored by servers that enable
          the WindowsGMSA feature flag.
        type: string
      runAsUserName:
        description: The UserName in Windows to run the entrypoint of the container
          process. Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          This field is alpha-level and it is only honored by servers that enable
          the WindowsRunAsUserName feature flag.
        type: string
    type: object
  io.k8s.api.rbac.v1.PolicyRule:
    description: PolicyRule holds information that describes a policy rule, but does
      not contain information about who the rule applies to or which namespace the
      rule applies to.
    properties:
      apiGroups:
        description: APIGroups is the name of the APIGroup that contains the resources.  If
          multiple API groups are specified, any action requested against one of the
          enumerated resources in any API group will be allowed.
        items:
          type: string
        type: array
      nonResourceURLs:
        description: NonResourceURLs is a set of partial urls that a user should have
          access to.  *s are allowed, but only as the full, final step in the path
          Since non-resource URLs are not namespaced, this field is only applicable
          for ClusterRoles referenced from a ClusterRoleBinding. Rules can either
          apply to API resources (such as "pods" or "secrets") or non-resource URL
          paths (such as "/api"),  but not both.
        items:
          type: string
        type: array
      resourceNames:
        description: ResourceNames is an optional white list of names that the rule
          applies to.  An empty set means that everything is allowed.
        items:
          type: string
        type: array
      resources:
        description: Resources is a list of resources this rule applies to.  ResourceAll
          represents all resources.
        items:
          type: string
        type: array
      verbs:
        description: Verbs is a list of Verbs that apply to ALL the ResourceKinds
          and AttributeRestrictions contained in this rule.  VerbAll represents all
          kinds.
        items:
          type: string
        type: array
    required:
    - verbs
    type: object
  io.k8s.api.rbac.v1.Role:
    description: Role is a namespaced, logical grouping of PolicyRules that can be
      referenced as a unit by a RoleBinding.
    properties:
      apiVersion:
        description: 'APIVersion defines the versioned schema of this representation
          of an object. Servers should convert recognized schemas to the latest internal
          value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        type: string
      kind:
        description: 'Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client submits
          requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        description: Standard object's metadata.
      rules:
        description: Rules holds all the PolicyRules for this Role
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
    type: object
  io.k8s.api.rbac.v1.RoleRef:
    description: RoleRef contains information that points to the role being used
    properties:
      apiGroup:
        description: APIGroup is the group for the resource being referenced
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
      name:
        description: Name is the name of resource being referenced
        type: string
    required:
    - apiGroup
    - kind
    - name
    type: object
  io.k8s.api.rbac.v1.Subject:
    description: Subject contains a reference to the object or user identities a role
      binding applies to.  This can either hold a direct API object reference, or
      a value for non-objects such as user and group names.
    properties:
      apiGroup:
        description: APIGroup holds the API group of the referenced subject. Defaults
          to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io"
          for User and Group subjects.
        type: string
      kind:
        description: Kind of object being referenced. Values defined by this API group
          are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized
          the kind value, the Authorizer should report an error.
        type: string
      name:
        description: Name of the object being referenced.
        type: string
      namespace:
        description: Namespace of the referenced object.  If the object kind is non-namespace,
          such as "User" or "Group", and this value is not empty the Authorizer should
          report an error.
        type: string
    required:
    - kind
    - name
    type: object
  io.k8s.apimachinery.pkg.api.resource.Quantity:
    description: |-
      Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

      The serialization format is:

      <quantity>        ::= <signedNumber><suffix>
        (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
        (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI>       ::= m | "" | k | M | G | T | P | E
        (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
        a. No precision is lost
        b. No fractional digits will be emitted
        c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
        1.5 will be serialized as "1500m"
        1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

      This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
    type: string
  io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
    description: |-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

      Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
    description: A label selector is a label query over a set of resources. The result
      of matchLabels and matchExpressions are ANDed. An empty label selector matches
      all objects. A null label selector matches no objects.
    properties:
      matchExpressions:
        description: matchExpressions is a list of label selector requirements. The
          requirements are ANDed.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: matchLabels is a map of {key,value} pairs. A single {key,value}
          in the matchLabels map is equivalent to an element of matchExpressions,
          whose key field is "key", the operator is "In", and the values array contains
          only "value". The requirements are ANDed.
        type: object
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
    description: A label selector requirement is a selector that contains values,
      a key, and an operator that relates the key and values.
    properties:
      key:
        description: key is the label key that the selector applies to.
        type: string
        x-kubernetes-patch-merge-key: key
        x-kubernetes-patch-strategy: merge
      operator:
        description: operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
        type: string
      values:
        description: values is an array of string values. If the operator is In or
          NotIn, the values array must be non-empty. If the operator is Exists or
          DoesNotExist, the values array must be empty. This array is replaced during
          a strategic merge patch.
        items:
          type: string
        type: array
    required:
    - key
    - operator
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
    description: ListMeta describes metadata that synthetic resources must have, including
      lists and various status objects. A resource may have only one of {ObjectMeta,
      ListMeta}.
    properties:
      continue:
        description: continue may be set if the user set a limit on the number of
          items returned, and indicates that the server has more data available. The
          value is opaque and may be used to issue another request to the endpoint
          that served this list to retrieve the next set of available objects. Continuing
          a consistent list may not be possible if the server configuration has changed
          or more than a few minutes have passed. The resourceVersion field returned
          when using this continue value will be identical to the value in the first
          response, unless you have received this token from an error message.
        type: string
      remainingItemCount:
        description: remainingItemCount is the number of subsequent items in the list
          which are not included in this list response. If the list request contained
          label or field selectors, then the number of remaining items is unknown
          and the field will be left unset and omitted during serialization. If the
          list is complete (either because it is not chunking or because this is the
          last chunk), then there are no more remaining items and this field will
          be left unset and omitted during serialization. Servers older than v1.15
          do not set this field. The intended use of the remainingItemCount is *estimating*
          the size of a collection. Clients should not rely on the remainingItemCount
          to be set or to be exact.
        format: int64
        type: integer
      resourceVersion:
        description: 'String that identifies the server''s internal version of this
          object that can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to
          the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
        type: string
      selfLink:
        description: |-
          selfLink is a URL representing this object. Populated by the system. Read-only.

          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        type: string
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
    description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version
      of the resource that the fieldset applies to.
    properties:
      apiVersion:
        description: APIVersion defines the version of this resource that this field
          set applies to. The format is "group/version" just like the top-level APIVersion
          field. It is necessary to track the version of a field set because it cannot
          be automatically converted.
        type: string
      fieldsType:
        description: 'FieldsType is the discriminator for the different fields format
          and version. There is currently only one possible value: "FieldsV1"'
        type: string
      fieldsV1:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
        description: FieldsV1 holds the first JSON version format as described in
          the "FieldsV1" type.
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        description: Operation is the type of operation which lead to this ManagedFieldsEntry
          being created. The only valid values for this field are 'Apply' and 'Update'.
        type: string
      time:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time is timestamp of when these fields were set. It should always
          be empty if Operation is 'Apply'
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
    description: ObjectMeta is metadata that all persisted resources must have, which
      includes all objects users must create.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: 'Annotations is an unstructured key value map stored with a resource
          that may be set by external tools to store and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects. More
          info: http://kubernetes.io/docs/user-guide/annotations'
        type: object
      clusterName:
        description: The name of the cluster which the object belongs to. This is
          used to distinguish resources with same name and namespace in different
          clusters. This field is not set anywhere right now and apiserver is going
          to ignore it if set in create or update request.
        type: string
      creationTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      deletionGracePeriodSeconds:
        description: Number of seconds allowed for this object to gracefully terminate
          before it will be removed from the system. Only set when deletionTimestamp
          is also set. May only be shortened. Read-only.
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
      finalizers:
        description: Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove
          the entry from the list. If the deletionTimestamp of the object is non-nil,
          entries in this list can only be removed.
        items:
          type: string
        type: array
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

          If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        type: string
      generation:
        description: A sequence number representing a specific generation of the desired
          state. Populated by the system. Read-only.
        format: int64
        type: integer
      labels:
        additionalProperties:
          type: string
        description: 'Map of string keys and values that can be used to organize and
          categorize (scope and select) objects. May match selectors of replication
          controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
        type: object
      managedFields:
        description: ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal housekeeping,
          and users typically shouldn't need to set or understand this field. A workflow
          can be the user's name, a controller's name, or the name of a specific apply
          path like "ci-cd". The set of fields is always in the version that the workflow
          used when modifying the object.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        type: array
      name:
        description: 'Name must be unique within a namespace. Is required when creating
          resources, although some resources may allow a client to request the generation
          of an appropriate name automatically. Name is primarily intended for creation
          idempotence and configuration definition. Cannot be updated. More info:
          http://kubernetes.io/docs/user-guide/identifiers#names'
        type: string
      namespace:
        description: |-
          Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

          Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        type: string
      ownerReferences:
        description: List of objects depended by this object. If ALL objects in the
          list have been deleted, this object will be garbage collected. If this object
          is managed by a controller, then an entry in this list will point to this
          controller, with the controller field set to true. There cannot be more
          than one managing controller.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        type: array
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

          Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object. Populated by the system. Read-only.

          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        type: string
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

          Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
    description: OwnerReference contains enough information to let you identify an
      owning object. An owning object must be in the same namespace as the dependent,
      or be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: If true, AND if the owner has the "foregroundDeletion" finalizer,
          then the owner cannot be deleted from the key-value store until this reference
          is removed. Defaults to false. To set this field, a user needs "delete"
          permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        type: boolean
      controller:
        description: If true, this reference points to the managing controller.
        type: boolean
      kind:
        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        type: string
      name:
        description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
        type: string
      uid:
        description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
        type: string
    required:
    - apiVersion
    - kind
    - name
    - uid
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.Time:
    description: Time is a wrapper around time.Time which supports correct marshaling
      to YAML and JSON.  Wrappers are provided for many of the factory methods that
      the time package offers.
    format: date-time
    type: string
  io.k8s.apimachinery.pkg.util.intstr.IntOrString:
    description: IntOrString is a type that can hold an int32 or a string.  When used
      in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner
      type.  This allows you to have, for example, a JSON field that can accept a
      name or number.
    format: int-or-string
    type: string
info:
  title: Jenkins X
  version: "1.0"
paths: {}
swagger: "2.0"
